(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    857849,      15941]
NotebookOptionsPosition[    854253,      15873]
NotebookOutlinePosition[    854606,      15889]
CellTagsIndexPosition[    854563,      15886]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Notebook for Homework 1", "Section",
 CellChangeTimes->{{3.7391188965836153`*^9, 
  3.739118902022799*^9}},ExpressionUUID->"0c23635a-111d-4338-b3da-\
de77221e362a"],

Cell[CellGroupData[{

Cell["Get the Data", "Subsubsection",
 CellChangeTimes->{{3.73909239424166*^9, 3.739092398774824*^9}, {
  3.739092468096184*^9, 3.739092469312755*^9}, {3.739108212845667*^9, 
  3.739108215098493*^9}},ExpressionUUID->"fd8b3198-1947-4c21-ae06-\
a71bfe4ac46b"],

Cell["This is the location of the data on an Excel file:", "Text",
 CellChangeTimes->{{3.739108217431994*^9, 
  3.739108230850452*^9}},ExpressionUUID->"5ae7a89c-f9ce-45e2-9674-\
ed82cc6e67d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "originalFile", "=", 
   "\"\</Users/jaimebuitrago/Dropbox/Jaime/Wolfram Summer \
School/Boston2017Hourly.xlsx\>\""}], ";"}]], "Code",
 CellChangeTimes->{{3.7390923271501913`*^9, 3.739092350287402*^9}, 
   3.739092420149015*^9, {3.739117752637579*^9, 3.739117756919338*^9}, {
   3.739125404128003*^9, 3.739125440178213*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"39875c20-e080-454c-b290-b05c3e3d6e63"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "originalFile2", " ", "=", " ", 
   "\"\</Users/jaimebuitrago/Dropbox/Jaime/Wolfram Summer \
School/EnergyJuneMA.xlsx\>\""}], "*)"}]], "Input",
 CellChangeTimes->{{3.739125410373967*^9, 3.739125425948194*^9}, {
  3.739125762307476*^9, 
  3.7391257656499853`*^9}},ExpressionUUID->"554cc804-11e8-4d3d-acb9-\
af0c3492b4d6"],

Cell["We need to import the data into a variable and then cleanup", "Text",
 CellChangeTimes->{{3.739122559100421*^9, 
  3.739122590176681*^9}},ExpressionUUID->"e7b27d25-4373-4ad6-b888-\
d1e8a5f18ec9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sheet", "=", 
   RowBox[{"First", "@", 
    RowBox[{"Import", "[", "originalFile", "]"}]}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7391202370580587`*^9, 3.739120276882452*^9}, {
   3.7391210274658957`*^9, 3.7391210545001783`*^9}, {3.739121335863105*^9, 
   3.739121351299423*^9}, {3.739122604628531*^9, 3.739122608976679*^9}, 
   3.739125471278933*^9, 3.73912575477514*^9, {3.739128207416503*^9, 
   3.739128215640472*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"471244cc-7954-4079-b5c6-687496a069bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"headers", "=", 
  RowBox[{"First", "@", "sheet"}]}]], "Code",
 CellChangeTimes->{{3.7391226146951942`*^9, 3.739122630871088*^9}, 
   3.739125481852685*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"7c68703c-805f-4206-b49d-baff2e4afc1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"DateHour\"\>", ",", "\<\"Actual\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.739125482210321*^9, 3.739128146333165*^9, 3.739128222293775*^9, {
   3.73912910542802*^9, 3.739129136090425*^9}},
 CellLabel->"Out[10]=",ExpressionUUID->"c180e379-140d-4bc8-8a23-2fbd5a523ab5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{"headers", "\[Rule]", "#"}], "]"}], "&"}], ",", 
    RowBox[{"Rest", "@", "sheet"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.7391226238421783`*^9, 3.739122632818342*^9}, 
   3.73912548439107*^9, {3.739125749339179*^9, 3.739125750988791*^9}, 
   3.739128228113811*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"e7aa36e0-41c5-4998-8ae1-8978d7c98746"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 00:00:00\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                    ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "1542.5595703`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:00:00\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                    ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "1436.8842773`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:59:59\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "59", ",", 
                    "59.989999771118164`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "1401.3000488`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 02:59:59\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "2", ",", "59", ",", 
                    "59.985000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "1433.7454834`"}]}], 
            "\[RightAssociation]"}], ",", 
           TemplateBox[{"8751"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 18:59:16\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "18", ",", "59", ",", 
                    "16.22499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "2404.779541`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 19:59:16\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "19", ",", "59", ",", 
                    "16.21999979019165`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "2293.5598145`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 20:59:16\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "20", ",", "59", ",", 
                    "16.21500015258789`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "2178.7243652`"}]}], 
            "\[RightAssociation]"}], ",", 
           RowBox[{"\[LeftAssociation]", 
            RowBox[{
             RowBox[{"\<\"DateHour\"\>", "\[Rule]", 
              TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 21:59:16\"", 
                  StyleBox[
                   RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
                RowBox[{"DateObject", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "21", ",", "59", ",", 
                    "16.210000038146973`"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]},
               "DateObject",
               Editable->False]}], ",", 
             RowBox[{"\<\"Actual\"\>", "\[Rule]", "1769.9102783`"}]}], 
            "\[RightAssociation]"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 26362247151464226877, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 26362247151464226877, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 26362247151464226877, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[26362247151464226877 === $SessionID, 
   Out[11], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739128235631382*^9, 3.739129111258463*^9, 
  3.7391291448997498`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"9c328a56-88b3-4246-8c7f-0fcfdecf7881"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data1", "=", 
  RowBox[{"Rule", "@@@", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<DateHour\>\"", ",", "\"\<Actual\>\""}], "}"}]}], "]"}], 
    "]"}]}]}]], "Code",
 CellChangeTimes->{3.7391254972516727`*^9, 3.739125715330989*^9, 
  3.739128245871518*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"7d2ca0f7-a103-436c-92b3-84848b619348"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 00:00:00\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                  ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1542.5595703`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:00:00\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                  ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1436.8842773`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "59", ",", 
                    "59.989999771118164`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1401.3000488`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 02:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "2", ",", "59", ",", 
                    "59.985000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1433.7454834`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 03:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "3", ",", "59", ",", 
                    "59.980000019073486`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1384.6164551`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 04:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "4", ",", "59", ",", 
                    "59.97499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1458.6136475`"}], ",", 
           TemplateBox[{"8747"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 16:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "16", ",", "59", ",", 
                    "16.235000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2588.5803223`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 17:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "17", ",", "59", ",", 
                    "16.230000019073486`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2490.1052246`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 18:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "18", ",", "59", ",", 
                    "16.22499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2404.779541`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 19:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "19", ",", "59", ",", 
                    "16.21999979019165`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2293.5598145`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 20:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "20", ",", "59", ",", 
                    "16.21500015258789`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2178.7243652`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 21:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "21", ",", "59", ",", 
                    "16.210000038146973`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1769.9102783`"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 26362247151464226877, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 26362247151464226877, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 26362247151464226877, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[26362247151464226877 === $SessionID, 
   Out[12], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739128251645855*^9, 3.7391291168408527`*^9, 
  3.739129153334238*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"88dbee02-e434-4827-b16a-c15e7e75e304"]
}, Open  ]],

Cell["\<\
I want to use the first 14 days of the month for training, therefore I have \
to cut the dataset to only the first 9 months = 6554 hours\
\>", "Text",
 CellChangeTimes->{{3.739119017665106*^9, 3.7391190471071043`*^9}, {
  3.739119180691145*^9, 3.739119187546076*^9}, {3.7391255138036537`*^9, 
  3.739125517504751*^9}, {3.739125584720148*^9, 3.7391255883923388`*^9}, {
  3.7391257031209707`*^9, 
  3.739125706001279*^9}},ExpressionUUID->"11b017c1-3b06-4f28-98d4-\
75bfe865b888"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingset", "=", 
  RowBox[{"data1", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7391191888004704`*^9, 3.739119213971201*^9}, {
   3.739120947829619*^9, 3.7391210118458357`*^9}, {3.7391210626635427`*^9, 
   3.7391210934896593`*^9}, {3.739121136726513*^9, 3.7391211693732452`*^9}, {
   3.7391212501416473`*^9, 3.739121320042426*^9}, {3.739121481007696*^9, 
   3.739121486260661*^9}, 3.73912254523421*^9, 3.739125526141282*^9, {
   3.7391255916004457`*^9, 3.739125650825284*^9}, {3.7391256915423393`*^9, 
   3.739125711743471*^9}, 3.7391282630186377`*^9, {3.739129509995399*^9, 
   3.739129512594746*^9}, {3.739129551681458*^9, 3.739129621242264*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"6efb55a0-1ae5-461b-b922-16620606fe23"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 00:00:00\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                  ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1542.5595703`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:00:00\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
                    "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                  ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1436.8842773`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 01:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "1", ",", "59", ",", 
                    "59.989999771118164`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1401.3000488`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 02:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "2", ",", "59", ",", 
                    "59.985000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1433.7454834`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 03:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "3", ",", "59", ",", 
                    "59.980000019073486`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1384.6164551`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 1 Jan 2017 04:59:59\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "1", ",", "1", ",", "4", ",", "59", ",", 
                    "59.97499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1458.6136475`"}], ",", 
           TemplateBox[{"8747"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 16:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "16", ",", "59", ",", 
                    "16.235000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2588.5803223`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 17:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "17", ",", "59", ",", 
                    "16.230000019073486`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2490.1052246`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 18:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "18", ",", "59", ",", 
                    "16.22499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2404.779541`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 19:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "19", ",", "59", ",", 
                    "16.21999979019165`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2293.5598145`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 20:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "20", ",", "59", ",", 
                    "16.21500015258789`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2178.7243652`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 21:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "21", ",", "59", ",", 
                    "16.210000038146973`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1769.9102783`"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 28, 26362247151464226877, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 28, 26362247151464226877, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 28, 26362247151464226877, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[26362247151464226877 === $SessionID, 
   Out[28], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{
  3.7391282673342447`*^9, 3.739129159025498*^9, {3.7391295482255793`*^9, 
   3.739129628319371*^9}},
 CellLabel->"Out[28]=",ExpressionUUID->"d6ffe3d8-3881-4960-a755-b5bc195e1046"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"validationset", " ", "=", " ", 
  RowBox[{"data1", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "24"}], "*", "31"}], ";;"}], " ", "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.739125721856152*^9, 3.739125745773345*^9}, 
   3.739128275264246*^9, {3.7391296394239397`*^9, 3.739129656413995*^9}, {
   3.7391299442618027`*^9, 3.739129945062181*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"646c8cc9-195d-41d5-b24f-1b6cf72c2105"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            TemplateBox[{RowBox[{"\"Thu 30 Nov 2017 22:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "11", ",", "30", ",", "22", ",", "59", ",", 
                    "19.925000190734863`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1555.3656006`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Thu 30 Nov 2017 23:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "11", ",", "30", ",", "23", ",", "59", ",", 
                    "19.920000076293945`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1451.3734131`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Fri 1 Dec 2017 00:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "1", ",", "0", ",", "59", ",", 
                    "19.914999961853027`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1395.1630859`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Fri 1 Dec 2017 01:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "1", ",", "1", ",", "59", ",", 
                    "19.90999984741211`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1387.2364502`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Fri 1 Dec 2017 02:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "1", ",", "2", ",", "59", ",", 
                    "19.90500020980835`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1446.8320313`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Fri 1 Dec 2017 03:59:19\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "1", ",", "3", ",", "59", ",", 
                    "19.90000009536743`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1702.9815674`"}], ",", 
           TemplateBox[{"732"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 16:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "16", ",", "59", ",", 
                    "16.235000133514404`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2588.5803223`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 17:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "17", ",", "59", ",", 
                    "16.230000019073486`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2490.1052246`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 18:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "18", ",", "59", ",", 
                    "16.22499990463257`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2404.779541`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 19:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "19", ",", "59", ",", 
                    "16.21999979019165`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2293.5598145`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 20:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "20", ",", "59", ",", 
                    "16.21500015258789`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "2178.7243652`"}], ",", 
           RowBox[{
            TemplateBox[{RowBox[{"\"Sun 31 Dec 2017 21:59:16\"", 
                StyleBox[
                 RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{"-", "4.`"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}],
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    
                    RowBox[{
                    "2017", ",", "12", ",", "31", ",", "21", ",", "59", ",", 
                    "16.210000038146973`"}], "}"}], ",", "\"Instant\"", ",", 
                  "\"Gregorian\"", ",", 
                  RowBox[{"-", "4.`"}]}], "]"}]},
             "DateObject",
             Editable->False], "\[Rule]", "1769.9102783`"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 36, 26362247151464226877, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 36, 26362247151464226877, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 36, 26362247151464226877, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[26362247151464226877 === $SessionID, 
   Out[36], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739128276075178*^9, 3.739129162041379*^9, 
  3.739129659870573*^9, 3.7391299483282127`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"f261abdb-dac8-4ad4-a450-98d7b32cd574"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train a Neural Network", "Subsubsection",
 CellChangeTimes->{{3.7391081200180883`*^9, 3.739108149246619*^9}, {
  3.739108265140738*^9, 
  3.739108272937531*^9}},ExpressionUUID->"5129ed10-a50e-40d7-9050-\
8ec91b0c883f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739108281083253*^9, 3.739108301140563*^9}, 
   3.7391083399404993`*^9, 3.739120286092988*^9, 3.739121098915283*^9, {
   3.739122412743086*^9, 3.739122429002242*^9}, {3.7391224839498377`*^9, 
   3.739122492882044*^9}, {3.73912908869309*^9, 3.7391290958880463`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"c3ac7f32-f2dd-40ae-b912-e22964ef30eb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["8759", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 8759, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Date"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Date"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Date", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1.1f1.2)" -> 
           Association[
            "Weight" -> {0.07619047619047618, 0.07619047619047618, 
              0.07619047619047618, 0.07619047619047618, 0.07619047619047618, 
              0.07619047619047618, 0.07619047619047618, 0.03888888888888889, 
              0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
              0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
              0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
              0.03888888888888889, 0.03888888888888889}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["ConformDate", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
             "Calendar" -> "Gregorian", "Example" -> 
             DateObject[{2017, 1, 1, 0, 0, 0.}, "Instant", "Gregorian", -4.], 
             "Version" -> {11.3, 0}, "ID" -> 6522107190151799743, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Date", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["DateExtractFeatures", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
             "Keys" -> {
              "Entity", "Year", "Month", "Day", "Hour24", "Minute", "Second", 
               "DayName", "AMPM", "MonthName"}, 
             "Functions" -> {{
               Map[MachineLearning`PropagateMissing[AbsoluteTime, #]& , 
                 Slot["Entity"]]& , Slot["Year"]& , Slot["Month"]& , Slot[
                "Day"]& , Slot["Hour24"]& , Slot["Minute"]& , Slot[
                "Second"]& }, {
               Slot["Year"]& , Slot["DayName"]& , Slot["AMPM"]& , Slot[
                "MonthName"]& }}, "Output" -> 
             Association[
              "f1.1" -> Association[
                "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                  0.10666666666666667`, 0.06666666666666667, 0.04, 0.04, 
                  0.013333333333333334`}, "Type" -> "NumericalVector", 
                 "Description" -> "Year, month, etc."], "f1.2" -> 
               Association[
                "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                  0.13333333333333333`, 0.06666666666666667}, "Type" -> 
                 "NominalVector", "Description" -> 
                 "Month name, day name, etc."]], "Version" -> {11.3, 0}, "ID" -> 
             9052578701621578506]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1.1" -> Association[
                "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                  0.10666666666666667`, 0.06666666666666667, 0.04, 0.04, 
                  0.013333333333333334`}, "Type" -> "NumericalVector", 
                 "Description" -> "Year, month, etc."], "f1.2" -> 
               Association[
                "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                  0.13333333333333333`, 0.06666666666666667}, "Type" -> 
                 "NominalVector", "Description" -> 
                 "Month name, day name, etc."]], "Output" -> 
             Association[
              "f1.1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 0.5333333333333333], 
               "f1.2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 0.4666666666666667]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1.1" -> Association[
                    "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                    0.10666666666666667`, 0.06666666666666667, 0.04, 0.04, 
                    0.013333333333333334`}, "Type" -> "NumericalVector", 
                    "Description" -> "Year, month, etc."]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 8759, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {3.707981978105001*^9, 2017., 6.524146592076721,
                     15.715378467861628`, 11.496289530768353`, 
                    58.98652814248202, 38.091300376733564`}, "Method" -> 
                    "Naive", "VectorLength" -> 7, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {3.707981978105001*^9, 2017., 6.524146592076721,
                     15.715378467861628`, 11.496289530768353`, 
                    58.98652814248202, 38.091300376733564`}, 
                    "StandardDeviation" -> {9.102607110148609*^6, 1., 
                    3.447560991353972, 8.795123653607403, 6.921490064077951, 
                    0.8914359778555935, 12.651301018469285`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 7]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{0.5773245242932837, -0.014224936721782126`, 
                    0.0034819579493713623`, -0.017995738471399368`}, {0., 0., 
                    0., 0.}, {0.5750763742640718, 0.025360288949658878`, 
                    0.06124911710222635, -0.0632881004509895}, {
                    0.057560907648478155`, -0.45830273281217826`, \
-0.7132587488899833, 0.5227632393624418}, {
                    0.0008242291221754705, -0.5042997926050339, 
                    0.6974689347586562, 0.5091297727656878}, {
                    0.0021340515861021933`, -0.7303028073057377, \
-0.031661055922059714`, -0.6798762955034074}, {-0.576771242169448, \
-0.038113525636169626`, -0.005748159658356924, -0.030732110334041916`}}, 
                    "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {3.707981978105001*^9, 2017., 6.524146592076721,
                     15.715378467861628`, 11.496289530768353`, 
                    58.98652814248202, 38.091300376733564`}, 
                    "StandardDeviation" -> {9.102607110148609*^6, 1., 
                    3.447560991353972, 8.795123653607403, 6.921490064077951, 
                    0.8914359778555935, 12.651301018469285`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.013953, "MaxTrainingMemory" -> 
                    1029736, "DataMemory" -> 490656, "FunctionMemory" -> 
                    22520, "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 6, 27, 19, 8, 12.727793`7.857328089382076}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 7, "Output" -> 
                 Association[
                  "f1.1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 
                    0.5333333333333333]], "Type" -> "NumericalVector", 
                 "Version" -> {11.3, 0}, "ID" -> 8107450913529958190]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1.2" -> Association[
                    "Weight" -> {0.13333333333333333`, 0.13333333333333333`, 
                    0.13333333333333333`, 0.06666666666666667}, "Type" -> 
                    "NominalVector", "Description" -> 
                    "Month name, day name, etc."]], "VectorLength" -> 4, 
                 "Output" -> 
                 Association[
                  "f1.2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 
                    0.4666666666666667]], "Type" -> "NominalVector", 
                 "Version" -> {11.3, 0}, "ID" -> 1910214237604377460]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1.1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 0.5333333333333333]],
              "Mean" -> {3.707981978105001*^9, 2017., 6.524146592076721, 
              15.715378467861628`, 11.496289530768353`, 58.98652814248202, 
              38.091300376733564`}, 
             "StandardDeviation" -> {9.102607110148609*^6, 1., 
              3.447560991353972, 8.795123653607403, 6.921490064077951, 
              0.8914359778555935, 12.651301018469285`}, "Output" -> 
             Association[
              "f1.1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 0.5333333333333333]],
              "Version" -> {11.3, 0}, "ID" -> 6961431869975419273]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1.2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 0.4666666666666667]], 
             "Index" -> {
               Association[2017 -> 1], 
               Association[
               Friday -> 1, Monday -> 2, Saturday -> 3, Sunday -> 4, Thursday -> 
                5, Tuesday -> 6, Wednesday -> 7], 
               Association["AM" -> 1, "PM" -> 2], 
               Association[
               "April" -> 1, "August" -> 2, "December" -> 3, "February" -> 4, 
                "January" -> 5, "July" -> 6, "June" -> 7, "March" -> 8, "May" -> 
                9, "November" -> 10, "October" -> 11, "September" -> 12]}, 
             "Output" -> 
             Association[
              "f1.2" -> Association[
                "Weight" -> 0.4666666666666667, "Type" -> "NumericalVector"]],
              "EmbeddingVectors" -> {
              RawArray["Real32",{{0.}, {-0.35548335313796997`}}], 
               RawArray["Real32",{{0., 0., 0., 
                0.}, {-0.5492445230484009, -0.10949528962373734`, 
                0.9492074251174927, 
                1.0684850215911865`}, {-0.27832964062690735`, 
                0.05826803296804428, -0.8463623523712158, \
-0.09842173010110855}, {1.2400327920913696`, -0.4809279441833496, 
                0.4291341006755829, 0.7673293948173523}, {-0.3973258137702942,
                 0.08361352980136871, -0.01286659948527813, \
-0.46881750226020813`}, {-0.07583794742822647, -0.4083738327026367, \
-0.18597626686096191`, 0.7700384259223938}, {-0.02875497005879879, 
                0.37114426493644714`, -0.12582573294639587`, \
-0.8310154676437378}, {
                0.04026228189468384, -0.18314340710639954`, \
-0.13313990831375122`, 0.243108332157135}}], 
               RawArray["Real32",{{0., 
                0.}, {-0.3010474145412445, -0.5815305709838867}, {
                0.325636625289917, 0.7173276543617249}}], 
               RawArray["Real32",{{0., 0., 0., 0., 0.}, {0.4469488263130188, 
                0.5335918068885803, -0.20870332419872284`, 
                0.09114644676446915, -0.781877338886261}, {
                0.8049996495246887, -0.7989356517791748, 0.06164894253015518, 
                0.06985877454280853, 0.18921372294425964`}, {
                0.7396908402442932, -0.28381380438804626`, 
                0.49987149238586426`, 0.2263406664133072, 
                0.32388487458229065`}, {0.40963801741600037`, 
                0.3874097168445587, 
                0.48877763748168945`, -0.018540216609835625`, 
                0.4566452205181122}, {0.21628272533416748`, 
                0.09250247478485107, -0.5097429752349854, 
                0.006030452903360128, -0.24692894518375397`}, {
                0.2930755019187927, 0.588653028011322, -0.44432321190834045`, 
                0.5278012752532959, -0.16290098428726196`}, \
{-0.49176257848739624`, 
                1.3328707218170166`, -0.35923370718955994`, \
-0.2801101505756378, 
                0.3717978298664093}, {-0.30742794275283813`, \
-0.7000824809074402, 
                0.27338260412216187`, -0.42727142572402954`, \
-0.09616521000862122}, {0.19671577215194702`, 
                0.296345978975296, -0.12217952311038971`, \
-0.3965664505958557, -0.5480290651321411}, {
                0.13167403638362885`, -0.28831198811531067`, 
                0.38748612999916077`, -0.06101469323039055, \
-0.37192922830581665`}, {-0.4192599356174469, -0.3651230037212372, 
                1.014738917350769, 0.3236215114593506, 1.0321564674377441`}, {
                0.12186527997255325`, -0.0405750535428524, \
-0.7224841117858887, 0.37154650688171387`, -0.44223302602767944`}}]}, 
             "Version" -> {11.3, 0}, "ID" -> 3937335934769048135]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1.1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 0.5333333333333333], 
               "f1.2" -> Association[
                "Weight" -> 0.4666666666666667, "Type" -> "NumericalVector"]],
              "Spans" -> {
               Span[1, 7], 
               Span[8, 19]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association[
                "Weight" -> {0.07619047619047618, 0.07619047619047618, 
                  0.07619047619047618, 0.07619047619047618, 
                  0.07619047619047618, 0.07619047619047618, 
                  0.07619047619047618, 0.03888888888888889, 
                  0.03888888888888889, 0.03888888888888889, 
                  0.03888888888888889, 0.03888888888888889, 
                  0.03888888888888889, 0.03888888888888889, 
                  0.03888888888888889, 0.03888888888888889, 
                  0.03888888888888889, 0.03888888888888889, 
                  0.03888888888888889}, "Type" -> "NumericalVector"]], 
             "Version" -> {11.3, 0}, "ID" -> 7721349050457577617]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1514633901436659470]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {1743.9820040335458`}, 
             "StandardDeviation" -> {476.48630543059613`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3310916768165398898]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 595895951619086921]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (1743.9820040335458` + 
       476.48630543059613` #& ), 
      "ProcessorFunction" -> (-3.6600884100069275` + 
       0.0020986962030237356` #& ), "Name" -> "value", 
      "Quantiles" -> {-2.8275368814976107`, 3.5050397590276967`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
           "logvariance" -> 
           NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "1" -> Association[
                "Type" -> "Reshape", "Arrays" -> Association[], "Parameters" -> 
                 Association["Dimensions" -> {1, 19}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1, 19}, NeuralNetworks`RealT]]], 
               "2" -> Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2}, "Stride" -> {1}, "PaddingSize" -> {0}, 
                   "Function" -> Mean, "Dimensionality" -> 1, "Interleaving" -> 
                   False, "$Channels" -> 1, "$InputSize" -> {19}, 
                   "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                   "$MXGlobalPool" -> False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1, 19}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1, 18}, NeuralNetworks`RealT]]], 
               "3" -> Association[
                "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1, 18}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Reshape", "Arrays" -> Association[], "Parameters" -> 
                 Association["Dimensions" -> {1, 3, 6}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1, 3, 6}, NeuralNetworks`RealT]]], 
               "5" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1:eJwB1gEp/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwEAAAA
aAAAAAEAAAABAAAAAQAAALX8Mb58C1++hD4BPrp5Zb4Kn24+kKbaO9A8Uj26
4x2+uzthvsXnzDxJC9s9IXY4vQnh272f6L49rxi0vCCGmDu3nZq9KMAjPgil
l7wGSvC9ZjExvjxbVj6y0m2+9AAfvnAr6b1I8808Yea2vVw8L7yfA2O9dGlo
PvoILj6neQY+FaunPWhYvrwfFmO8lIy8Pdfphb1LRwC+mru/vWPlF76uMDI9
tjduPm8FG7760uC96B0jvgb1Aj5K8es9JRUkPmz/b76Zmau90oTmPWADpTtn
4pm7dwWRPen/Or59uEQ+hw5YPUCNCz6ql0++LKfkPQ10U748pnu9dlBWvfln
Xj3k1za9tiJzPcjbPD1y5509HsCzPftQoLv9iyk636L5vL1GTz6aiW6+uMeG
vQEhzL302Ss+fENTvi32c7wCv+a8zHRHPfMATD6iJj8+LqQ1PntOub2RqaY9
Q9wbPpk14T3rUhC+EIRvvjq7+73kPRm+g243Pq3eIz6EYSm+2rcbPna3NT7d
iDm8yllHvrZPLLz6EkW+mBrxPayMZD3yO9K9YvjUmQ==
                    "], 
                   "Biases" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZwTAKBjsAAG3a
CGg=
                    "]], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 104, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "Interleaving" -> False, "$InputChannels" -> 1, 
                   "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                   "$OutputSize" -> {3, 6}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1, 3, 6}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Interleaving" -> False, 
                   "$Channels" -> 104, "$InputSize" -> {3, 6}, 
                   "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> "valid",
                    "$MXGlobalPool" -> False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> {104, 3, 6}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association["Gamma" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZwQACDfajePBi
AGNzVgA=
                    "], "Beta" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZwTAKBjsAAG3a
CGg=
                    "], "MovingMean" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZwTAKBjsAAG3a
CGg=
                    "], "MovingVariance" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZwQACDfajePBi
AGNzVgA=
                    "]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 104, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
TEnDB4lbSf5POkz/aY72GgHiX/uppNwUhF+zIvlF7g0YabYMfs3Twr1z4kVt
X1MeWBTGm5RcOOf3Aer332U4Ff5c+NpTF+c+XwwnFgXzTJc0NK42wtyh7wKW
fgjj5/F3xH6rbkH1KVWGAiv4dOCWIFk5nHYMOEvLfh2gNhsJO8y14BnpO+j8
ucPitemqOPSklhD+Lo609MqgU/W0UG+XhEv6CTxgd28KdfHGddWlEFIznh4/
T8ZmqfnwauGpGpskd64/JcG5s4fRvt+Z5NHTBOWX1YHqrwYwPX2T+si/EA75
GbHK8lZwff8SEjfGc49jFrgwUhHV5ZLIK8MYbpz3Qo+i74L/EmtcerAvSwR5
fvHbgfU0+nLj8lrxfvIvSmx0Y8mQ81A2eyJtu2KAJT7GeKctgtqee4uH6hO4
SzDEBs9tVJFcRe/83PmRgi7GKJvzHefZlPPZg8NqZLiuTwLILQ7HiVXW/M04
AUcLMvjiRAVcTi8T51mthWmH78HYIEX2Olon1iU0wT/vX5DQLmG7eX9g8eUE
/LteA241I98JHAFNhwTcsPwCzDubhO+d/lGYkhL33WXCqYmOHHv+I1U39oPV
T69T21ngcW/74N1h8uy4sZKufK6gnKZXQq90dZzq9JL2N52C/VEqvKU7y097
o8gJwaX01W4ZvT/yiBY9O0UtHe0groyEt2eRpqn24AUvEjHHZTRdbdLj5xWG
GPLOgNeW6dK6kY30/u1hOj82hsubvfnDyk54+cAbX6a0gWKWL48dYU2vTSaI
TzdJuDNGQxjzwESy8kKEOPjze3Hr/J81vqtd+OkhTSxfdR4OnWj29V1ihnP/
JKGuthkOfhPAl63j+bmiCS8q8Wf327eh3y0LXCv04aa7NpJVB0OxxV4WT1e2
g2RJJc15q8krSz+T2fF9tGh9bxw3z5L/pBiiWqMNHhkni4+LlDhmyQ0ytX0J
lz9METf0/U16uxJ40D19flJkjYlK2mj2O4I1hivTtGo/8Au4RAWVr+Ca4mra
mHWSroEr1W9po3srpUnXbxXsTNglGq04LCy3mgk7r5lw7/lJ3NJSDBfaj1Fp
iRm+H3OGtPams9IHbb4YLseh3304Qv81yCScBo84U2zxW0Kyt/eJT6p6o6RP
L97fm8D5ogE7jYwSF+jvgg0e9px6J5BfyyRh+rq/JN+lzNs+h9KGqQOF4FRZ
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
XnhCfia4DloIi6eEwnj2xKYCFfw/4k44pA==
                    "], "Biases" -> 
                   RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0.}]], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 30, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "Interleaving" -> False, "$InputChannels" -> 104, 
                   "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                   "$OutputSize" -> {3, 6}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{104, 3, 6}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]]],
                "10" -> Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Interleaving" -> False, 
                   "$Channels" -> 30, "$InputSize" -> {3, 6}, 
                   "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> "valid",
                    "$MXGlobalPool" -> False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]]],
                "11" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                   "$Dimensions" -> {30, 3, 6}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]]],
                "12" -> Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   RawArray["Real32",{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1.}], "Beta" -> 
                   RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0.}], "MovingMean" -> 
                   RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0.}], "MovingVariance" -> 
                   RawArray["Real32",{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1.}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 30, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]]],
                "13" -> Association[
                "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{540}, NeuralNetworks`RealT]]], 
               "14" -> Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
J59Z4yDwtzLqmZZBQ1+24Ma9ExgaW0n/A9z0etE=
                    "], "Biases" -> 
                   RawArray["Real32",{0., 0.}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                   540, "$InputDimensions" -> {540}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{540}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"]}], 
           "2" -> Association[
            "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> NeuralNetworks`ValidatedParameter[
                 Span[1, 1]]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "3" -> Association[
            "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> NeuralNetworks`ValidatedParameter[
                 Span[2, 2]]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "mean"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}], 
        Association["Version" -> "11.3.4"]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> 0.1}, 
        TrainingProgressFunction -> {
          
          Function[{
           MachineLearning`file31NeuralNetworks`PackagePrivate`history$}, 
           If[MachineLearning`file31NeuralNetworks`PackagePrivate`history$[
              "ValidationLoss"] =!= None, 
             AppendTo[{}, 
              MachineLearning`file31NeuralNetworks`PackagePrivate`history$[
              "ValidationLoss"]]]; If[
             TrueQ[
              And[Length[{}] > 1, 
               (Length[{}] - # > Ceiling[# 1]& )[
                MachineLearning`PackageScope`MinLoc[{}]]]], "StopTraining", 
             Null]], "Interval" -> 1}, "RoundLossList" -> {}, 
        "ValidationLossList" -> {}, "ValidationLossSeries" -> Missing[], 
        "TotalTrainingTime" -> 0., "MeanInputsPerSecond" -> 0.], "InputType" -> 
      "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association[
          "Weight" -> {0.07619047619047618, 0.07619047619047618, 
            0.07619047619047618, 0.07619047619047618, 0.07619047619047618, 
            0.07619047619047618, 0.07619047619047618, 0.03888888888888889, 
            0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
            0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
            0.03888888888888889, 0.03888888888888889, 0.03888888888888889, 
            0.03888888888888889, 0.03888888888888889}, "Type" -> 
           "NumericalVector"], "Key" -> "(f1.1f1.2)", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "FeatureNumber" -> 19, 
      "DistributionData" -> {NormalDistribution, Automatic}, "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "Convolutional", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 4362, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> Tanh, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.276710490086834, "Options" -> Association[]],
         "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> 0.1}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 10, "Options" -> Association[]], ValidationSet -> 
        Association["Value" -> {
            Association["Input" -> CompressedData["
1:eJy0fXk4V13Xf5ooRSkRJTRoppEUmlQ0SKQ0aNCoUlKiQZrnEppTKhRSklAp
hIiQIUqZp1CIzMXv5fnt7/M9a7/7es85rn3/46qn7ns9a6+z1md91qS0fueS
jR07dOig3KVDhz7/83P8/Po3L343hHZA/0wMDBjxoCE0Zn5j1Lhu30KPPHQ6
cmVYus7m83cVl1Rf1Omkl9bn7O8Gnf/5k9O1wtJa/57bQIvnbX//o3JG20+p
hOi231dx/9H65zpMTU9t/alo+qeo7dcqT+Pafmo/CWr96fDJIKf1z681f27b
9ufMbiWGTlAbVNac/lkHieV8Oy4xYuM3nYyPj0e9fFEROqvfiXOdpdNDkVx7
YoctWvvuc6iQXIoqn5Jaf4Yt+uzb9t/ZJF3WJtfI8S/b/nurZqe0yVt0K6/t
9y++K2n7c7mOJW3/HmvHp62/DpuV96ztp4pGjM7XOUsOvOrTKJDr92kj4w9b
G3R2pYinaGrm6xxuFllR8aBaINeRWUO/enVvFJbr/9IXlEvxvE9x2++LjExu
+/3Cf9ltenpd/7H1p9upV6k6yseL693Ecbn8/1lU3BqTrRNTo9mSN7de8I5i
mcmRlzsy5Oow09W97V21rdrkcXjVPbzt52iFxP/tHVnJpTPuVE7vtUUCudQG
9ZOVaCrSSa2a8exvbUzo3+jvPYOqawT6WvpdSVzTqKhd+nIcH9r6+znT37u3
/f41heK2n9ui09ve8dzC76Fi8pfrGpojBHJdrPmcleYdrmPk0/voj7ufdOaP
Xjtfvr5GoC/rxKb1v9MjhOVa+9vKtfVnTkrYf/69EvJhbfbme6009H/RV1ho
eHKbXNppeW36id35vU2/ofk5bXZX+TUyNPR1cHny6d+C71Eu/8TxfysqQ2fZ
mixeIPUzVDdU+rn3tUaBXLN2V+wfeva38PfI9R2nFz1u09/aPpvb9B7W/3BS
2+9bLP/W9vfm3QkO1ZWTm/zqTAUmF7Iv6Cfyktd9aDlfISzX//U98pLrarHf
zXXvfwveUVxj8BBXpUqdw8Wnm8xP/dHZPuK1v/xKf4F9dV3ae0Hs29/C7zh9
q3Num3x5oiFtv/6xprztvY7J/v7f7MtN5XObHeaMNktv+2k2rbLtv68e2Ca/
Q+CxSp3t/UXVZ+QmCPTVfVFZ7te9EaHIf9WucNo7x7lRIJfKtKbbM1oSuLwj
lCusm112m/y7jGra/ven//6jd6NfbXpXPBOXrjPQQ2d57czPArmS5pkY6s7/
HhrXe+JWOdNanTs5E2zjfOIEcp1/1unzr8WfheWa/mHH17af/ptftOkp3vRs
279fXiTrf/OrDk1jPrS969K6NvufPnxuaNvfX77uP/+ePWdyQzcM+LoytroS
e0ex4eufPMws0rG7HBRuP6teIJfqGj3L5T8rQ9shF6t3nJWxaV1N2GPMT6Dv
UV7B1rf3yJz/+nsJ24iyMY8Z/mt0enXb3z8Z3SZHTrnNt7b3qb3wv/ovVn7i
W5+iX85ZKQK5UHw0LEzPajGoCYVxKHVHZj+DDyntsns28dG9WKxH5u9agVz2
a6dOex71R8d809nZp/426Gyw/H12zT1/gZ84sP1e9IqSWoa+OOKJnGcZYW2/
DrBui0NuTh+/tMlvqPW07d/rF58e6nKor/ONp9WYXD6DO+zNtvwRCu3rSlPK
Bp+H1VzkgvpiJddj6xU+Ob41mFzI7jtOUvFUMf4tkMtP0b/smkeNsFxc/QQr
uR5+yt3sOfQLZl8H9xu97TI8NxTKFRG1Ufqu5Bfq9qW9sLGbzo8Cgf9atPfb
l4QdxaHqSRIbjwwpx+JQmOa/4M2/CoT9F+c4lHjze9uvVfvktskdGxjb9ufX
LG3Dr26Du5SEuqr/OnPrdxkm18QNX1UGRzWGQr+66I/OnuM1ZcJycfUTrOQa
7CZq+8Y7X/COCH91eT3aSs++GntHL69F/mvv5Au/4/+Fc3jhr3OxXR4o3cT1
9WPK2Ffbq+tD5ToZbPiVECd4R7eg84Pk7jD09X/5e17vKL8sWErhGTnvgH5V
7kaJ/slb9POOiv0HTz9W/4P5CZSnQX31vbt3gqfqH8b3yFFfrPzE3tpSA3XV
b4J3RHgC4egXdhMdtyYXCOQqUV7+QGnaN4bdc/T3rPCEqEh9YsZQsr5g3jGk
0+5H6QM56YuXX323SlFs3JRagb4uiN+53aflT+hLxyOdnB//xuTaUXx635Mp
tVz8F5Rr7VH1jDa5lsT9x58rz2vL03Im/nVqk/vxlEwdyYCpFZplZwT6Qjjn
tuSxBYFKdaFed++uOd27XPCO2QmeoflPTnGxe1750PajoiKfIisF+kJ5B8of
IY62Nzcw1X1fKawvrv6LVd7xPfdcXHQsnm8XO41XrMuv1ElYf+Ka0aNqgb6k
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
pH45w/M7ZFJ25jLk4viOrHimBo0u0ds64v0TyH9BnnzLdY9terUVwu/INX9k
VX8032e5+E4SeS4A+q9c7Vr/lSH05wKcNn6I6mnehPkvVH+EeOK+98zr4aZN
XOTihaOlj/nOirtP7i+EPOadRk+POe6c+gt52X3EvQOmS+/j/XJILhgfK1Yu
+6B+nzmXSaNvaOEuTbk7cnj/BKrDQP81Zf7MsDR5Rv8EZ36Vjb7cjfYsP+n6
QyAXyocQjwnnRW2LLU92vf9DWC6u8ZFVPpQQMG/6qQV4fHQ7GHym75FSLK81
Xj1nuecCRnzkir9YveP6FQH7xSMriP4L4olNTosyT7/g5L949X/ZqUhtW5mL
xyHkJyCesLg3Jax/ISMOcX5HNvZlOjD20D4pfI6CFLc1p4i9ntQ1vz36YpWn
maZVXT76D/dfpLmA4v67M381M/M0rvVHNvq6Ztrq7+ME+oL8PczTtl0um/9C
M05YX1T4+6UzNF+kDf8g0BeqpyFcCPO0G4lLen6b+6E9+mJVT1t7Kj6152Ty
vALEX5Ne1r8XHUt/viNAa1b4s5uOmL5Iee2RyOEOt59fZuiLY9xmpa+0FJdp
28pLse8R+QmIC8OS/uhF5tDv297wK9JQN4tsX5C/rzg+cfqIf5zsi1d9+2w3
kyddJMl9otCvWh6LjJHoyKlPlJe+WiZe2+AVgs+7k+rbUvtuvax6w5h3p4K/
FIpeaa7W+SnQF4qPyN/DuB2qcGnv/nE/QznIxSs+9vJ/emnpf3Dxf/75/3gC
yQXf8UJ+qWTp8iYu+uKFJwYuGXaqa9kv7B1RXQHWOx7bR4VeKf8lLBdXvMrq
HSs0pkg6+ZL7AWC99qJyRY9Tz+j3A5gGtvYXemJ+AtWHYN6hfOL0COPbnu2x
e1Z+Qmb1qm6O18l1UYgnZsrHJ2y+RL8uql/x81bYUHKdD/bfu20Uc5gxjH6d
T0W9tY8Pn7dC+Ta0+4tTTc23iHLimXjF7YuBLY/NOiZh9oXkgv6r32/L0zK9
k9pj96zsa6ys/nwXu3LMr/ZJ9LqxO64Aq9cqPd1msGBbORe/yos3ib7idcMp
HK8/ov4JaF9jdyfKvXrBrD/S6C/8PfjGu+UP0wTviPgvJBfEExrXpnXs/SKN
8Y4ccQ4r/mv3uO9pPjpkuQxveOefW/77v3NNFwqO2yzkJBev/i+HC+bOVkFk
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
3qcAv8cjNx7eKltIf5/CEucHL2ozs7HvkZRvbxs2/6Lj+2wu3yMvPPFc+Xua
jw7uJ1DeAeO2VKp9XOMIhp+gcl+0SNSn1X9h74jsHvp76/URJvP/pgm/I9e4
zeodi8wfP30sn4npC+W1EK+eq/pYGNE5U1hfVOp8V530dmbl4rgQ5bUwbv/8
LjbevJiBC7l+j6z0FbXCMMLAHb8rguSCdYW8qPq7StcZ80NU4vaCgQZnynLx
uI3qj9CvZq+3eONazIjbVOzLtWhFL681WZhcCH9Bv5pTp3Sg43bGvjSu9sVK
rh8TTmrGF5D7rKDdr1szYV3VN/p9VsE6iz0HziLnQ7C/MKKjuOvbefTzof3N
j5b3qyfvTYd1q45PHfSml3Lam84r374Td0SrShefT0M4GtqXod3uF1+mMebT
qNwVmVR/L0SikMzfwzh061aJWccukTrtkIsVf9/bMq73NVM8DqG+DsgDdHTU
HLJ6cxoXuXj5iW+jjm9U60vejwn7mZwWJzy4Js1pPyavukLnaytjpCTJ+ydg
3H7uNTE8uGstF/viNferl2TdpSCbnNdC++rrm3z6dTb9vLbznA+LFA/hdRj0
PcI8bY5vv5jJhxh1GK75Iyu5bK2Xr1kWRL5HAXnfiSIG4195cbpHwavft2y3
o46jAXkeBvJfe2KK9m8x4jQPw6ve8cS29Y4B+Q4e9KtGb17ttrPgdAePF/8l
JX18n4kYPleOeCYo181eFcsbRBlz5VTm5lLtF7vUS5DvK0C/euDfeq1UEfr3
FaQy8p+rDsgX6AvltSh/hHF7ot0jZW+lfC7fI698+3HOmkUdYsh4FeaPtmv7
KgTF08erV/94HrNT+SN4R3j3FPZ1dCop72sziNPdU151mO/rfbM6PQsS6Ave
34Zx6JTGwMfvq4Paoy9WeGJsptepHRfw+Ij2A8D+nNcyQ/v/O86Ij1xxISt9
XTz/d9YDb3w/ANIX5E2qjYOlVt5n7AfgiqNZyTVHdfcVyXBy3zbMaxWs3WVD
wzj1bfPyX0M7fV/z1pQ8LwrtPjBtSdPOhfTnRd8YDijuvhuvwyD8BeN2sqy/
c1dr+vc7dA02vw/xJ9sXzNO2ve6uYu1N374SGx5c9nmBx0fET6D5IZmPy5QK
zy4Oq7ft8Furn1hYB/7+i5V9LdhW7vLQjDw/BN/x6pMpU2pMOM0P8Zqb0/ow
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
w+3yOQb/i7N/scELy/f82RcgsAvWjzCPrp75pLn1Hqf6kVd/qNeC5SN+++L8
CdJ7jNql82PDgTbq5yX/oVOPD8cnUJ8PxvvoRyH/ObYw8AnOejBs4n1qhZL9
40l4nYbqWuhfz5KFNVdNZtRpVPao94u+bD/pJHkODPpX019/jZ9zkv4c2LNJ
nrtW9ibvt4I45ppPl9fvW0R/v1V7xcYnJQNxv0d9GNhXWPtWb/fqfsz5Dhpz
+DdUO/lyiQK7EI6J+h3wvFw+DOh44pvYHbtY4Zi9Yv/o1WJ2oX4a1Eur3dHy
pTWAE7+QF75qmLlNdaFkqcC/UJ6DeKIQZ5r6SnFR41+lXPyLV729psZh7eUO
/H9EcxQwTmzpca2gVri6W3GCzf8YmCeVqxlMnn+E9VB6Rejq1z705x9fDY7b
22GN791C9wjxnAkGH/5Stm3icl688K+s8t7iRY0V2HmhPh/0r0V3dhjWlDH2
BVDRG8q17WPmfp281w3G+wHrbbQGxdLfV74h6cWWCf8+xuIEivewHvq7l87s
A8aPu3NerOJEn5+W89LNcB4y6ndAv38sUn5ilx2Dh8y1TmMVJ2Lm/8mjMf9C
/SEYJxxHGl7TLGO8Ryr10PTRf3TvsPNC/gVxzE0uXsuuGnykfl6qUfebMr58
wuIq6ndAu8abGLXKt3zqjt+ziqsZ73aN6RtN7m9Dvx+6cmSvQUGc+tu8+mkF
Uf989bxKtgv617uUggu+4fTt2j0kMHLMgruCe4S6sDC//2TmckH58N2u90hF
Z362guqZL4fJ8+7wHhM2aSYPnEV/3l1xSOeeMpzPROKlnb/3fca9uLbunBer
/H7hmpK/RLfg+ASKq5AnGpUSl9ewmYFPUJkLmGAwN2yzWq3ALpRPoHwV8nMM
f5wSnq9ey+W8+PWtJL4XVBoFY/6F8Gh4XonS/WPWqQVxeY+88nuL1zsuj11L
5onCfGLN05fh29dy4onyqh+tW9KDCuzJeSHsu1d9nmYo6kg/Lyw98aNtyO1q
gV3oH0L3COuhdu15izTvMfJ7Kv2hZsnOPT9k3ATyRCXmZxS01tHHTbYf7zg2
/hwZj8Z4HaU7EmSj6fdFUzalXBv9kKy/CufTxiwXUzYPoa+/mrHVQ618MFmf
Cfb5lLbYBA5Qoq/PFDc2fFJvS3zeHeHRMH5dPhF5L8+SMe9ORXfF09vrreg/
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
gg==
              "], "Target" -> CompressedData["
1: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

              "]], "Interval" -> 1}, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], "Network" -> 
        Association["Value" -> NetGraph[
            Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
               "Target" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "meanVariance" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT],
                    "logvariance" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 19}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 19}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {19}, 
                    "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 18}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 18}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 3, 6}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 3, 6}, NeuralNetworks`RealT]]],
                     "5" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{104, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 104, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 3, 6}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 104, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {104, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 104, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{30, 104, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 30, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 104, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 30, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {30, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 30, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{540}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 540}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 540, "$InputDimensions" -> {540}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{540}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "mean"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input2" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                   "Target" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                   "Input1" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "Inverse" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   "minus" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   "threading" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   "l2Regularization" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   "concatenate" -> 
                   Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "summation" -> 
                   Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input2"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input2"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Target"], 
                   NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input1"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "meanVariance", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "meanVariance", "Outputs", "mean"], 
               NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "meanVariance", "Outputs", "logvariance"], 
               NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Target"] -> 
               NeuralNetworks`NetPath["Inputs", "Target"], 
               NeuralNetworks`NetPath["Outputs", "Loss"] -> 
               NeuralNetworks`NetPath["Nodes", "loss", "Outputs", "Output"]}], 
            Association["Version" -> "11.3.4"]], "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> NetGraph[
            Association[
            "Type" -> "Graph", "Inputs" -> 
             Association["Input2" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT], "Input1" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "Inverse" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                 Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
               Association[
                "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> 1], "Inputs" -> 
                 Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
               Association[
                "Type" -> "Summation", "Arrays" -> Association[], 
                 "Parameters" -> Association[], "Inputs" -> 
                 Association[
                  "Input" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "Inverse", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input2"], 
               NeuralNetworks`NetPath[
                "Nodes", "l2Regularization", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input2"], 
               NeuralNetworks`NetPath["Nodes", "threading", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Inverse", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Target"], 
               NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "Input1"], 
               NeuralNetworks`NetPath["Nodes", "threading", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "minus", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "concatenate", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "threading", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "concatenate", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "l2Regularization", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "summation", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "concatenate", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "summation", "Outputs", "Output"]}], 
            Association["Version" -> "11.3.4"]], "Options" -> 
          Association[]]]], "TrainingInformation" -> 
    Association[
     "LossName" -> "StandardDeviation", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[7.472008040367099, 0.07615665237825098], 
         "StandardDeviation" -> 
         PlusMinus[418.8380468053179, 37.846149201430855`], "EvaluationTime" -> 
         0.0010632600000000001`, "TestSize" -> 100, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.145134, "TrainingMemory" -> 269544, 
         "ModelMemory" -> 247872, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.0010047525589514889`, "MeanCrossEntropyHistory" -> {
           PlusMinus[7.472008040367099, 0.05385088532912787]}, 
         "StandardDeviationHistory" -> {
           PlusMinus[418.8380468053179, 26.761268742129598`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "Convolutional", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 4362, "ActivationFunction" -> Tanh, 
           "L2Regularization" -> 0.1, "Dropout" -> 0.276710490086834, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> 0.1}, 
           MaxTrainingRounds -> 10, ValidationSet -> Automatic, 
           "EarlyStopping" -> Automatic, TrainingProgressReporting -> None, 
           "Network" -> NetGraph[
             Association[
             "Type" -> "Graph", "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                "Target" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], "Outputs" -> 
              Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
              "Nodes" -> Association[
               "meanVariance" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 19}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 19}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {19}, 
                    "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 18}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 3, 6}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 3, 6}, NeuralNetworks`RealT]]],
                     "5" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{104, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 104, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 104, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {104, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 104, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{30, 104, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 30, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 104, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 30, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {30, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 30, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, NeuralNetworks`RealT]],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{540}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 540}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 540, "$InputDimensions" -> {540}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{540}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "meanVariance", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input1"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "meanVariance", "Outputs", "mean"], 
                NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input2"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "meanVariance", "Outputs", "logvariance"], 
                NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Target"] -> 
                NeuralNetworks`NetPath["Inputs", "Target"], 
                NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "loss", "Outputs", "Output"]}], 
             Association["Version" -> "11.3.4"]], 
           "NetTrainOptions" -> {
            LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
           "LossFunction" -> NetGraph[
             Association[
             "Type" -> "Graph", "Inputs" -> 
              Association["Input2" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT], "Input1" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], "Outputs" -> 
              Association[
               "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
              "Nodes" -> Association[
               "Inverse" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                Association[
                 "Type" -> "Threading", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                  Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                Association[
                 "Type" -> "Threading", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                  "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                Association[
                 "Type" -> "Catenate", "Arrays" -> Association[], 
                  "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                  Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                Association[
                 "Type" -> "Summation", "Arrays" -> Association[], 
                  "Parameters" -> Association[], "Inputs" -> 
                  Association[
                   "Input" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
              "Edges" -> {
               NeuralNetworks`NetPath["Nodes", "Inverse", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input2"], 
                NeuralNetworks`NetPath[
                 "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input2"], 
                NeuralNetworks`NetPath["Nodes", "threading", "Inputs", "1"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "Inverse", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                NeuralNetworks`NetPath["Inputs", "Target"], 
                NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                NeuralNetworks`NetPath["Inputs", "Input1"], 
                NeuralNetworks`NetPath["Nodes", "threading", "Inputs", "2"] -> 
                NeuralNetworks`NetPath["Nodes", "minus", "Outputs", "Output"],
                 NeuralNetworks`NetPath[
                 "Nodes", "concatenate", "Inputs", "1"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "threading", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Nodes", "concatenate", "Inputs", "2"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "l2Regularization", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "summation", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "concatenate", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "summation", "Outputs", "Output"]}], 
             Association["Version" -> "11.3.4"]]}, "FinalTrainingSize" -> 
         8759], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
          "ModelMemory", "ExperimentCount", "ModelUtility", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 193643037099648]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 1858], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.5666407170720368], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{84, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {84}, "$OutputSize" -> 84, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJzt0LEJAlEQQMGPgdiGLWgBhy2oDZygkSBoIGaWroIlvHAGdmHZ7K1Pt/1l
McZ4rL5rPz939/v8Oix/x3m+bjfX3/P4nzHe0yCmaU/TnqY9TXua9jTtadrT
tKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna07SnaU/TnqY9TXua
9jTtadrTtKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna07SnaU/T
nqY9TXua9jTtadrTtKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna
07SnaU/TnqY9TXua9jTtadrTtKdpT9Pee/oAZe1HVQ==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {84}, "$OutputSize" -> 84, 
                    "$InputSize" -> 84, "$InputDimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 84}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 84, "$InputDimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 4} -> None}, 
                 TargetDevice -> "CPU"}], "LossFunction" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.94853608689491, 40.75078706086634], 
              "StandardDeviation" -> 
              PlusMinus[550.0169979556556, 31.87303582931678], 
              "EvaluationTime" -> 0.000028328222222222222`, "TestSize" -> 
              2100, "TrainingSize" -> 15, "TrainingTime" -> 
              0.09681233333333333, "TrainingMemory" -> 172144., "ModelMemory" -> 
              226600., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.0007762775302961034, "MeanCrossEntropyHistory" -> {
                PlusMinus[7.947028143694575, 0.04948134081279445], 
                PlusMinus[89.4485421841658, 11.503441501663405`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[508.6762605612678, 15.1941404358925], 
                PlusMinus[570.015399719857, 10.567802087028594`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.9225363816266645`, 0.06995144553548037], 
              "StandardDeviation" -> 
              PlusMinus[442.11924308341236`, 8.234869670257916], 
              "EvaluationTime" -> 0.00001728470588235294, "TestSize" -> 3400, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.065207, 
              "TrainingMemory" -> 190104, "ModelMemory" -> 226600, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009732924438772064,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.9225363816266645`, 0.04946314149193961]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[442.11924308341236`, 5.822932186026801]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.541033271881671, 0.034832141705206335`], 
              "StandardDeviation" -> 
              PlusMinus[444.116010875168, 11.384280762374981`], 
              "EvaluationTime" -> 0.00002422555555555556, "TestSize" -> 1800, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.143102, 
              "TrainingMemory" -> 429400, "ModelMemory" -> 243184, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009675616862282975,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.541033271881671, 0.02463004360300215]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[444.116010875168, 8.049902126006907]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.967593673019028, 0.021340922245907244`], 
              "StandardDeviation" -> 
              PlusMinus[546.5707957929259, 6.397762048580314], 
              "EvaluationTime" -> 0.000014754649400743905`, "TestSize" -> 
              7259, "TrainingSize" -> 1500, "TrainingTime" -> 1.007115, 
              "TrainingMemory" -> 923032, "ModelMemory" -> 276208, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0007883709843134714,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.967593673019028, 0.015090310836855858`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[546.5707957929259, 4.523900928969078]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.614658898988523, 0.12146567321571572`], 
              "StandardDeviation" -> 
              PlusMinus[522.9453014930158, 13.984366283867175`], 
              "EvaluationTime" -> 0.000025164383561643836`, "TestSize" -> 
              1752, "TrainingSize" -> 7007, "TrainingTime" -> 3.311026, 
              "TrainingMemory" -> 2777344, "ModelMemory" -> 398512, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008214996543744302,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.614658898988523, 0.08588920121222178]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[522.9453014930158, 9.888440229918999]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000025164383561643836`, "ModelMemory" -> 
             398512, "StandardDeviation" -> 
             PlusMinus[522.9453014930158, 13.984366283867175`], 
             "TrainingMemory" -> 2777344, "TrainingTime" -> 
             4.235712966129109], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 2762], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.3162662860655189], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{43, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {43}, "$OutputSize" -> 
                    43, "$InputSize" -> 19, "$InputDimensions" -> {19}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzkEKQGAQQOHJQq5hbccB5Aqc4FeslGIhO0dHucJbqPdqpqbZfOW49nMW
EXvxrD4d3balc8jfY0pLUy/vs/om4mrjV+ll08uml00vm142vWx62fSy6WXT
y6aXTS+bXja9bHrZ9LLpZdPLppdNL9v/vDdkCChs
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {43}, "$OutputSize" -> 43, 
                    "$InputSize" -> 43, "$InputDimensions" -> {43}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {43}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{29, 43}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {29}, "$OutputSize" -> 29, 
                    "$InputSize" -> 43, "$InputDimensions" -> {43}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIWihkYGuwZBgSM
2jtq76i9o/aO2jtq76i9o/aO2jtq76i9o/YOPnsBO6Qd3g==
                    "], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {29}, "$OutputSize" -> 29, 
                    "$InputSize" -> 29, "$InputDimensions" -> {29}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzrEJgEAMRuFgIS5hYW2nA4grnBOcoNWBcBZi5+hehniF+H+QQEjzuvUI
e2VmZ1NWiNecc7yX2o8tpnFI/mzL9OaeyT5FvSz1stTLUi9LvSz1stTLUi9L
vSz1stTLUi9Lvaz/9L6JCB3s
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {29}, "$OutputSize" -> 29, 
                    "$InputSize" -> 43, "$InputDimensions" -> {43}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{43}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {29}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{19, 29}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {19}, "$OutputSize" -> 19, 
                    "$InputSize" -> 29, "$InputDimensions" -> {29}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIYihkYGuwZqApG
zRs1b9S8UfNGzaOWeQDamxZU
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {19}, "$OutputSize" -> 19, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIYiGUZQKDBnmFA
wKi9o/aO2jtq76i9o/aO2jtqLyYAAI20Fl4=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {19}, "$OutputSize" -> 19, 
                    "$InputSize" -> 29, "$InputDimensions" -> {29}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{29}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 19}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 8} -> 
                   None, {"meanVariance", 1, 10} -> 
                   None, {"meanVariance", 1, 12} -> 
                   None, {"meanVariance", 1, 14} -> 
                   None, {"meanVariance", 1, 16} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5881.8213393168135`, 1168.9887226996934`], 
              "StandardDeviation" -> 
              PlusMinus[2994.777700367943, 54.2252519955899], 
              "EvaluationTime" -> 0.000033530833333333334`, "TestSize" -> 
              1200, "TrainingSize" -> 60, "TrainingTime" -> 0.167237, 
              "TrainingMemory" -> 302896, "ModelMemory" -> 287992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00014370004520076416`, "MeanCrossEntropyHistory" -> {
                PlusMinus[5881.8213393168135`, 826.5998529515538]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[2994.777700367943, 38.343043397630986`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[17.475081574312878`, 10.076017585279226`], 
              "StandardDeviation" -> 
              PlusMinus[1189.9755470033772`, 395.6446898742107], 
              "EvaluationTime" -> 0.000021834509803921566`, "TestSize" -> 
              3400, "TrainingSize" -> 15, "TrainingTime" -> 
              0.09729533333333332, "TrainingMemory" -> 222626.66666666666`, 
              "ModelMemory" -> 287992., "ExperimentCount" -> 2, 
              "ModelUtility" -> 0.00034032511531217343`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[36.4365857520299, 3.953583435071144], 
                PlusMinus[16.370151947652367`, 0.9543810877630375]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[969.2355717430887, 14.41114719855202], 
                PlusMinus[1760.1464451582028`, 23.16117472564534]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[15.999262718616157`, 0.4420811339236486], 
              "StandardDeviation" -> 
              PlusMinus[1059.685112117783, 8.931272615064593], 
              "EvaluationTime" -> 0.000017607536231884057`, "TestSize" -> 
              6900, "TrainingSize" -> 300, "TrainingTime" -> 0.215152, 
              "TrainingMemory" -> 485912, "ModelMemory" -> 304576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00040689412629006975`, "MeanCrossEntropyHistory" -> {
                PlusMinus[15.999262718616157`, 0.3125985676320502]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1059.685112117783, 6.315363430737882]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017607536231884057`, "ModelMemory" -> 
             304576, "StandardDeviation" -> 
             PlusMinus[1059.685112117783, 8.931272615064593], 
             "TrainingMemory" -> 485912, "TrainingTime" -> 6.448958226666667],
            "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 4105], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.26953005572742195`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{60, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {60}, "$OutputSize" -> 60, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztz0EKQGAQQOHJQq7hCmyVXIET/IrVX4qF7Bwd5RbvfTVT06xePW/jWkTE
Ub1rTOew7+mayu9YUm6b/D27fyLuPnBsZrCZwWYGmxlsZrCZwWYGmxlsZrCZ
wWYGmxlsZrCZwWYGmxlsZrCZwWYGmxlsZrCZwWYGmxlsZrCZwWYGmxlsZrj7
B9r4NT0=
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {60}, "$OutputSize" -> 60, 
                    "$InputSize" -> 60, "$InputDimensions" -> {60}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {60}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{46, 60}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {46}, "$OutputSize" -> 46, 
                    "$InputSize" -> 60, "$InputDimensions" -> {60}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzkEKQGAQQOHJQq7hAhYcQK7ACX7FSikWsnN0lDu81PtqpqbZvHJc+zmL
iL14Vp+ObtvSOeTvMaWlqZf3WX0TcbXxW7YzbGfYzrCdYTvDdobtDNsZtjNs
Z9jOsJ1hO8N2hu0M2xm2M2xn2M6wnWE7w3bG1d7pHiqv
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {46}, "$OutputSize" -> 46, 
                    "$InputSize" -> 46, "$InputDimensions" -> {46}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzzEKg0AQQNEhheQauUAKbQXJFTYnWEGrBWFTSDqPrnsF2/8fzMAw1X/N
W1ofEfF7Xivl/VNr/n+7diy5DH1pz/c1YzTHFDg2M9jMYDODzQw2M9jMYDOD
zQw2M9jMYDODzQw2M9jMYDODzQw2M9jMYDODzQw2M9jMcL/5BOnXKr0=
                    
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {46}, "$OutputSize" -> 46, 
                    "$InputSize" -> 60, "$InputDimensions" -> {60}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {46}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 46}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 46, "$InputDimensions" -> {46}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{46}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 6} -> 
                   None, {"meanVariance", 1, 8} -> 
                   None, {"meanVariance", 1, 10} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[53.34101716930403, 10.721890001982846`], 
              "StandardDeviation" -> 
              PlusMinus[665.797768725137, 10.352427531657217`], 
              "EvaluationTime" -> 0.000029465757575757582`, "TestSize" -> 
              3000, "TrainingSize" -> 15, "TrainingTime" -> 
              0.08608666666666666, "TrainingMemory" -> 225378.66666666666`, 
              "ModelMemory" -> 279992., "ExperimentCount" -> 2, 
              "ModelUtility" -> 0.0006466978010307518, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[72.5871149551242, 13.44342521753568], 
                PlusMinus[52.14957794524454, 3.344833763741934]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[655.4710946600849, 16.653214507722684`], 
                PlusMinus[668.8128016138961, 8.998370444227248]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.608444910739282, 0.03817001134480807], 
              "StandardDeviation" -> 
              PlusMinus[442.7983864780661, 8.682458611184389], 
              "EvaluationTime" -> 0.000022959642857142856`, "TestSize" -> 
              2800, "TrainingSize" -> 60, "TrainingTime" -> 0.129975, 
              "TrainingMemory" -> 244840, "ModelMemory" -> 279992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009715974052438083,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.608444910739282, 0.02699027385988123]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[442.7983864780661, 6.139425361340014]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.53074447870836, 0.02434196652487704], 
              "StandardDeviation" -> 
              PlusMinus[436.9175168514596, 7.452640538998311], 
              "EvaluationTime" -> 0.00002843820512820513, "TestSize" -> 3900, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.187065, 
              "TrainingMemory" -> 478840, "ModelMemory" -> 296576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009851718486661323,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.53074447870836, 0.017212369597156493`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[436.9175168514596, 5.269812662871471]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.787844453768006, 0.011886590040851124`], 
              "StandardDeviation" -> 
              PlusMinus[656.2974823624144, 8.439701320311668], 
              "EvaluationTime" -> 0.00001274831243972999, "TestSize" -> 7259, 
              "TrainingSize" -> 1500, "TrainingTime" -> 1.188089, 
              "TrainingMemory" -> 961888, "ModelMemory" -> 329600, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0006564035237335284,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.787844453768006, 0.00840508842307031]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[656.2974823624144, 5.967770034781439]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001274831243972999, "ModelMemory" -> 
             329600, "StandardDeviation" -> 
             PlusMinus[656.2974823624144, 8.439701320311668], 
             "TrainingMemory" -> 961888, "TrainingTime" -> 7.023734367333333],
            "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "Convolutional"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 6781], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.2933906365247445], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 19}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {19}, 
                    "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 3, 6}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{73, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{73}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 73, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 73, "$InputSize" -> {3, 6}, "$OutputSize" -> {\
3, 6}, "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {73, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{73}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{73}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{73}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{73}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 73, 
                    "$Shape" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{73, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{68, 73, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{68}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 68, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 73, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{73, 3, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 68, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {68, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{68}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{68}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{68}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{68}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 68, 
                    "$Shape" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{17, 68, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 17, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 68, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{68, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 17, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {17, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 17, 
                    "$Shape" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{306}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 306}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 306, "$InputDimensions" -> {306}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{306}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
             "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.657715924538519, 0.26718564229504477`], 
              "StandardDeviation" -> 
              PlusMinus[504.17332490699573`, 23.067727374753105`], 
              "EvaluationTime" -> 0.00028436166666666665`, "TestSize" -> 300, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.09866333333333334, 
              "TrainingMemory" -> 295962.6666666666, "ModelMemory" -> 296848.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.0008488959746751059, "MeanCrossEntropyHistory" -> {
                PlusMinus[8.17540936972283, 0.19308247173132087`], 
                PlusMinus[7.644518130017293, 0.03082884100346295]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[526.1948523353777, 32.13631808522636], 
                PlusMinus[495.379294036952, 20.30796428589292]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.041392769883327, 0.06381624633502221], 
              "StandardDeviation" -> 
              PlusMinus[598.3573984688269, 16.47308189962528], 
              "EvaluationTime" -> 0.00013217874999999998`, "TestSize" -> 800, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.247937, 
              "TrainingMemory" -> 337296, "ModelMemory" -> 296848, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0007178687701598516,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.041392769883327, 0.04512490053336536]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[598.3573984688269, 11.648227918266409`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.596569212732449, 0.02443393262852134], 
              "StandardDeviation" -> 
              PlusMinus[485.1024380350311, 13.033971770709636`], 
              "EvaluationTime" -> 0.00012348666666666666`, "TestSize" -> 1200,
               "TrainingSize" -> 300, "TrainingTime" -> 0.886161, 
              "TrainingMemory" -> 569672, "ModelMemory" -> 308824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008855809214076628,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.596569212732449, 0.017277399452682682`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[485.1024380350311, 9.216409824862815]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00012348666666666666`, "ModelMemory" -> 
             308824, "StandardDeviation" -> 
             PlusMinus[485.1024380350311, 13.033971770709636`], 
             "TrainingMemory" -> 569672, "TrainingTime" -> 
             25.971610663333333`], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 841], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.35232910027655984`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{38, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{38}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {38}, "$OutputSize" -> 38, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzkEKQGAQQOHJQq5h4wAcQK7ACX7FSikWsnN0lBO8lcX7aqam2bxyXPs5
i4i9eFafjm7b0jnk7zGlpamX91l9E3G18Vu2MbYxtjG2MbYxtjG2MbYxtjG2
MbYxtjG2MbYxtjG2MbYxtjFXewMZRiSn
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{38}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {38}, "$OutputSize" -> 38, 
                    "$InputSize" -> 38, "$InputDimensions" -> {38}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {38}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{38}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 38}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 38, "$InputDimensions" -> {38}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{38}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 4} -> None}, 
                 TargetDevice -> "CPU"}], "LossFunction" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.34539000107422, 44.474960608480345`], 
              "StandardDeviation" -> 
              PlusMinus[651.9539355790587, 11.790900908690837`], 
              "EvaluationTime" -> 0.000016760761904761906`, "TestSize" -> 
              3600, "TrainingSize" -> 15, "TrainingTime" -> 
              0.06385566666666666, "TrainingMemory" -> 170002.66666666666`, 
              "ModelMemory" -> 170232., "ExperimentCount" -> 2, 
              "ModelUtility" -> 0.0006601130626491713, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[8.344512752662327, 0.03934440134333272], 
                PlusMinus[97.29439916426439, 12.528301707694126`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[660.185527987673, 9.679155565061627], 
                PlusMinus[641.5585720961925, 10.877156587718241`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.644313164572906, 0.012912483139435178`], 
              "StandardDeviation" -> 
              PlusMinus[483.4821652796953, 7.078389723019211], 
              "EvaluationTime" -> 0.000013997659574468085`, "TestSize" -> 
              4700, "TrainingSize" -> 60, "TrainingTime" -> 0.062097, 
              "TrainingMemory" -> 182072, "ModelMemory" -> 170232, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.000890744270967946, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[7.644313164572906, 0.009130504389851574]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[483.4821652796953, 5.005177373028052]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.87089095546029, 0.037191248740496716`], 
              "StandardDeviation" -> 
              PlusMinus[551.8466024437063, 13.790282424471457`], 
              "EvaluationTime" -> 0.000024138235294117647`, "TestSize" -> 
              1700, "TrainingSize" -> 300, "TrainingTime" -> 0.180777, 
              "TrainingMemory" -> 421552, "ModelMemory" -> 186816, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0007787859275428303,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.87089095546029, 0.02629818418520087]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[551.8466024437063, 9.75120221682143]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.071767463231438, 0.03493137873894958], 
              "StandardDeviation" -> 
              PlusMinus[595.79642918874, 7.8006860130711795`], 
              "EvaluationTime" -> 0.000012494282959085273`, "TestSize" -> 
              7259, "TrainingSize" -> 1500, "TrainingTime" -> 0.841743, 
              "TrainingMemory" -> 896344, "ModelMemory" -> 219840, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0007230438435706464,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.071767463231438, 0.02470021478250684]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[595.79642918874, 5.515917977749684]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012494282959085273`, "ModelMemory" -> 
             219840, "StandardDeviation" -> 
             PlusMinus[595.79642918874, 7.8006860130711795`], 
             "TrainingMemory" -> 896344, "TrainingTime" -> 4.979073624666667],
            "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 1858], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.6782072484667754], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{33, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {33}, "$OutputSize" -> 33, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzrEJgFAMANFgIa7hCjqAuIJO8AWtPghaiJ2jq2BzG1jcQQIhzaundViK
iNirZw3p6LctnWP5HnPKbZPfZ/1NxNXFL9LBdDAdTAfTwXQwHUwH08F0MB1M
B9PBdDAd7D+OG/0tIOI=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {33}, "$OutputSize" -> 33, 
                    "$InputSize" -> 33, "$InputDimensions" -> {33}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {33}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{24, 33}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {24}, "$OutputSize" -> 24, 
                    "$InputSize" -> 33, "$InputDimensions" -> {33}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFICihkYGuwZaA5G
7Ri1Y9SOUTtG7Ri1Y9SOUTsGjx0AM8EaGQ==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {24}, "$OutputSize" -> 24, 
                    "$InputSize" -> 24, "$InputDimensions" -> {24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFICiBUZQKDBnmFQ
gFF3oIJRd6CCUXegglF3oIJRd6CCUXegglF3oIJRd6CCUXegglF3oIJRd6AC
4twBAMXqGiI=
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {24}, "$OutputSize" -> 24, 
                    "$InputSize" -> 33, "$InputDimensions" -> {33}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{33}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{15, 24}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {15}, "$OutputSize" -> 15, 
                    "$InputSize" -> 24, "$InputDimensions" -> {24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfihkYGuwZKAKj
+kf1j+qnRD8AG3QTUA==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {15}, "$OutputSize" -> 15, 
                    "$InputSize" -> 15, "$InputDimensions" -> {15}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfiCUYQKDBnoHm
YNSOUTtG7Ri1Y9QOUu0AAAh+E1k=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {15}, "$OutputSize" -> 
                    15, "$InputSize" -> 24, "$InputDimensions" -> {24}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {15}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 15}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 15, "$InputDimensions" -> {15}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 8} -> 
                   None, {"meanVariance", 1, 10} -> 
                   None, {"meanVariance", 1, 12} -> 
                   None, {"meanVariance", 1, 14} -> 
                   None, {"meanVariance", 1, 16} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[44.84719968793474, 2.694701919603744], 
              "StandardDeviation" -> 
              PlusMinus[621.3556013578783, 36.76645429490344], 
              "EvaluationTime" -> 0.00002277483333333333, "TestSize" -> 3100, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11518533333333332`, 
              "TrainingMemory" -> 243365.3333333333, "ModelMemory" -> 266488.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.0006869797733305894, "MeanCrossEntropyHistory" -> {
                PlusMinus[45.65592182998677, 3.1401429141471486`], 
                PlusMinus[43.52218248583848, 4.019393311485662]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[661.2721081997164, 11.175943407567463`], 
                PlusMinus[589.2689847503269, 10.020050082630048`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.971381576618575, 0.03929771676493649], 
              "StandardDeviation" -> 
              PlusMinus[488.3256644429816, 7.158030847906862], 
              "EvaluationTime" -> 0.000014195869565217392`, "TestSize" -> 
              4600, "TrainingSize" -> 60, "TrainingTime" -> 0.07763, 
              "TrainingMemory" -> 245704, "ModelMemory" -> 266488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008818864402588563,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.971381576618575, 0.027787682009634867`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[488.3256644429816, 5.061492152497435]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.399333896502636, 0.028222516355742824`], 
              "StandardDeviation" -> 
              PlusMinus[999.8582594033248, 18.34239793125884], 
              "EvaluationTime" -> 0.000027982916666666666`, "TestSize" -> 
              2400, "TrainingSize" -> 300, "TrainingTime" -> 0.311129, 
              "TrainingMemory" -> 509056, "ModelMemory" -> 283072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00043039074647412297`, "MeanCrossEntropyHistory" -> {
                PlusMinus[8.399333896502636, 0.019956332697293997`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[999.8582594033248, 12.970033960415225`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027982916666666666`, "ModelMemory" -> 
             283072, "StandardDeviation" -> 
             PlusMinus[999.8582594033248, 18.34239793125884], 
             "TrainingMemory" -> 509056, "TrainingTime" -> 9.199115036666667],
            "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 4105], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.21704626943940541`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{49, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {49}, "$OutputSize" -> 49, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztz0EKQGAQQOHJQq7hCDiAXIET/IqVUixk5+goh3jpvZqpaVZfOa79nEXE
XjyrT0e3bekc8veY0tLUy/usvom42vhFOljpYKWDlQ5WOljpYKWDlQ5WOljp
YKWDlQ5WOljpYKWDlQ5WOljpYKWDlQ5WOljpYKWD1X8cN3fCLPI=
                    "], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {49}, "$OutputSize" -> 49, 
                    "$InputSize" -> 49, "$InputDimensions" -> {49}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {49}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{39, 49}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {39}, "$OutputSize" -> 39, 
                    "$InputSize" -> 49, "$InputDimensions" -> {49}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzkEKQGAQQOHJQq5hZc8B5Aqc4FeslGIhO0dHucHbWLxXMzXN5ivHtZ+z
iNiLZ/Xp6LYtnUP+HlNamnp5n9U3EVcbv04fSx9LH0sfSx9LH0sfSx9LH0sf
Sx9LH0sfSx9LH0sfSx9LH+v/vhszHSVo
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {39}, "$OutputSize" -> 39, 
                    "$InputSize" -> 39, "$InputDimensions" -> {39}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzzEKg0AQQNEhhXgNK2v1AOIV1hNsIKkEQYuQLkd39xYf8x/MwDDV7557
ej8i4mzLSvmzHEf+rk09Xnmbxq0++zJDVL85bsEOFjtY7GCxg8UOFjtY7GCx
g8UOFjtY7GCxg8UOFjtY7GCxg8UOFjtY/q/jAvW3JXI=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {39}, "$OutputSize" -> 39, 
                    "$InputSize" -> 49, "$InputDimensions" -> {49}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{49}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {39}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{28, 39}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 39, "$InputDimensions" -> {39}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIGihkYGuwZ6A5G
7Ry1c9TOUTtH7Ry1c9TOUTtH7Ry1c9TOoWgnAJkLHR0=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzrEJgEAMRuFgIQ5hY2WvA4grnBOcoNWBcBZi5+heRpC/sXgfJBDSvG49
wl6Z2dmUFeI15xzvpfZji2kckj/bMr25Z7Jfo09Dn4Y+DX0a+jT0aejT0Keh
T0Ofhj4NfRr6NN/6XvzTHSg=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 39, "$InputDimensions" -> {39}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{39}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 28}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 8} -> 
                   None, {"meanVariance", 1, 10} -> 
                   None, {"meanVariance", 1, 12} -> 
                   None, {"meanVariance", 1, 14} -> 
                   None, {"meanVariance", 1, 16} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[15.90671762794171, 82.96678998585834], 
              "StandardDeviation" -> 
              PlusMinus[1705.1710314076577`, 614.9436609911745], 
              "EvaluationTime" -> 0.00002014985507246377, "TestSize" -> 3900, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.08569766666666667, 
              "TrainingMemory" -> 247213.3333333333, "ModelMemory" -> 317688.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.0002362513130727089, "MeanCrossEntropyHistory" -> {
                PlusMinus[15.719536775757748`, 1.450214376153996], 
                PlusMinus[181.62779445574986`, 43.15095077265356]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1385.2936368702442`, 23.417623825394674`], 
                PlusMinus[2614.521077749861, 39.48358667872644]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[10.638346779503797`, 0.1205243639952057], 
              "StandardDeviation" -> 
              PlusMinus[1255.3925625527265`, 16.72411599698812], 
              "EvaluationTime" -> 0.000015102666666666667`, "TestSize" -> 
              4500, "TrainingSize" -> 60, "TrainingTime" -> 0.085397, 
              "TrainingMemory" -> 267488, "ModelMemory" -> 317688, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0003431257001875882,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[10.638346779503797`, 0.08522359507920572]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1255.3925625527265`, 11.825735830820719`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[216849.65554384247`, 25341.956217472034`], 
              "StandardDeviation" -> 
              PlusMinus[1902.4720451038586`, 20.90844331391979], 
              "EvaluationTime" -> 0.000018783888888888886`, "TestSize" -> 
              7200, "TrainingSize" -> 300, "TrainingTime" -> 0.343879, 
              "TrainingMemory" -> 506120, "ModelMemory" -> 334272, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00022652433942423799`, "MeanCrossEntropyHistory" -> {
                PlusMinus[216849.65554384247`, 17919.469089907063`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1902.4720451038586`, 14.784502051327213`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018783888888888886`, "ModelMemory" -> 
             334272, "StandardDeviation" -> 
             PlusMinus[1902.4720451038586`, 20.90844331391979], 
             "TrainingMemory" -> 506120, "TrainingTime" -> 
             10.125818203333333`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 1858], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.40727858872831435`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{28, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIGihkYGuwZ6A5G
7Ry1c9TOUTtH7Ry1c9TOUTtH7Ry1c9TOoWgnAJkLHR0=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{21, 28}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIUihkYGuwZaAJG
zR01d9TcUXNHzR01d2DNBQAoOBfW
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 21, "$InputDimensions" -> {21}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIUiGUYQKDBnoHu
YNTOUTtH7Ry1c9TOUTtH7Ry1c+jYCQAHXhfd
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {21}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{18, 21}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {18}, "$OutputSize" -> 18, 
                    "$InputSize" -> 21, "$InputDimensions" -> {21}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], 
                    "18" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIIihkYGuwZqAZG
zRo1a9SsUbOGrlkAHRIVkw==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {18}, "$OutputSize" -> 18, 
                    "$InputSize" -> 18, "$InputDimensions" -> {18}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIIiEUZQKDBnoEm
YNTcUXNHzR01d9TcwWAuAAnNFZY=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {18}, "$OutputSize" -> 18, 
                    "$InputSize" -> 21, "$InputDimensions" -> {21}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {18}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{14, 18}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 18, "$InputDimensions" -> {18}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIPihkYGuwZyAaj
ekf1Di+9ALlxEo8=
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 14, "$InputDimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIPiIUYQKDBnoFq
YNSsUbNGzRrMZgEAyMUSkw==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 18, "$InputDimensions" -> {18}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 14}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 14, "$InputDimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 10} -> 
                   None, {"meanVariance", 1, 12} -> 
                   None, {"meanVariance", 1, 14} -> 
                   None, {"meanVariance", 1, 16} -> 
                   None, {"meanVariance", 1, 18} -> 
                   None, {"meanVariance", 1, 20} -> 
                   None, {"meanVariance", 1, 22} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[9.375629690835524, 15.23077317606603], 
              "StandardDeviation" -> 
              PlusMinus[1113.4667945550887`, 384.4792767288745], 
              "EvaluationTime" -> 0.00004780083333333333, "TestSize" -> 1800, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.143565, 
              "TrainingMemory" -> 268762.6666666666, "ModelMemory" -> 316472.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.00036283501925555645`, "MeanCrossEntropyHistory" -> {
                PlusMinus[9.372337458971323, 0.03499075053511623], 
                PlusMinus[39.83380343291786, 3.3655804854287616`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1640.6714628094753`, 26.013398223865728`], 
                PlusMinus[872.2655796805009, 17.595321686331896`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[11.374879882680496`, 0.34466861640452356`], 
              "StandardDeviation" -> 
              PlusMinus[1647.490445370334, 18.279272798686428`], 
              "EvaluationTime" -> 0.000016736666666666665`, "TestSize" -> 
              3900, "TrainingSize" -> 60, "TrainingTime" -> 0.121974, 
              "TrainingMemory" -> 269344, "ModelMemory" -> 316472, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0002615790426523343,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[11.374879882680496`, 0.24371751592182353`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1647.490445370334, 12.925397751109973`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.843975142585409, 0.01288592813379032], 
              "StandardDeviation" -> 
              PlusMinus[1014.6409914878828`, 10.828319407106205`], 
              "EvaluationTime" -> 0.000017231643835616434`, "TestSize" -> 
              7300, "TrainingSize" -> 300, "TrainingTime" -> 0.19912, 
              "TrainingMemory" -> 505200, "ModelMemory" -> 333056, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00042476472613883434`, "MeanCrossEntropyHistory" -> {
                PlusMinus[8.843975142585409, 0.009111727165285648]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1014.6409914878828`, 7.656778081618692]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017231643835616434`, "ModelMemory" -> 
             333056, "StandardDeviation" -> 
             PlusMinus[1014.6409914878828`, 10.828319407106205`], 
             "TrainingMemory" -> 505200, "TrainingTime" -> 5.957205266666667],
            "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 1858], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.2662424092426826], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{84, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {84}, "$OutputSize" -> 84, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJzt0LEJAlEQQMGPgdiGLWgBhy2oDZygkSBoIGaWroIlvHAGdmHZ7K1Pt/1l
McZ4rL5rPz939/v8Oix/x3m+bjfX3/P4nzHe0yCmaU/TnqY9TXua9jTtadrT
tKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna07SnaU/TnqY9TXua
9jTtadrTtKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna07SnaU/T
nqY9TXua9jTtadrTtKdpT9Oepj1Ne5r2NO1p2tO0p2lP056mPU17mvY07Wna
07SnaU/TnqY9TXua9jTtadrTtKdpT9Pee/oAZe1HVQ==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {84}, "$OutputSize" -> 84, 
                    "$InputSize" -> 84, "$InputDimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{84}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 84}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 84, "$InputDimensions" -> {84}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{84}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 4} -> None}, 
                 TargetDevice -> "CPU"}], "LossFunction" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.359400043880662, 7.079139141156111], 
              "StandardDeviation" -> 
              PlusMinus[584.2224278543474, 11.080579497331284`], 
              "EvaluationTime" -> 0.00002416673076923077, "TestSize" -> 2900, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.12359799999999999`, 
              "TrainingMemory" -> 190549.3333333333, "ModelMemory" -> 226600.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.0007365039482806276, "MeanCrossEntropyHistory" -> {
                PlusMinus[8.307253301458607, 0.07251807957933402], 
                PlusMinus[22.464791431810244`, 1.1926836712477404`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[594.3158752851201, 11.479469522388229`], 
                PlusMinus[577.5453535819811, 9.336737742730293]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.6658470271791535`, 0.02107229627600681], 
              "StandardDeviation" -> 
              PlusMinus[487.3724615044146, 7.415411275169635], 
              "EvaluationTime" -> 0.000015103076923076921`, "TestSize" -> 
              3900, "TrainingSize" -> 60, "TrainingTime" -> 0.080108, 
              "TrainingMemory" -> 193104, "ModelMemory" -> 226600, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008835213435277709,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.6658470271791535`, 0.014900363591936446`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[487.3724615044146, 5.243487597959632]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.581402023306354, 0.015322311154807606`], 
              "StandardDeviation" -> 
              PlusMinus[462.5720660744125, 7.566412986372481], 
              "EvaluationTime" -> 0.000020125250000000002`, "TestSize" -> 
              4000, "TrainingSize" -> 300, "TrainingTime" -> 0.252443, 
              "TrainingMemory" -> 440920, "ModelMemory" -> 243184, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009306750108546887,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.581402023306354, 0.010834510121014737`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[462.5720660744125, 5.3502619319219376`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.31088721822758, 0.013610605227153455`], 
              "StandardDeviation" -> 
              PlusMinus[733.1363605168858, 8.533490636368395], 
              "EvaluationTime" -> 0.000011097809615649538`, "TestSize" -> 
              7259, "TrainingSize" -> 1500, "TrainingTime" -> 1.087323, 
              "TrainingMemory" -> 898824, "ModelMemory" -> 276208, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0005877572289317437,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.31088721822758, 0.009624151252173278]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[733.1363605168858, 6.034089096167999]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011097809615649538`, "ModelMemory" -> 
             276208, "StandardDeviation" -> 
             PlusMinus[733.1363605168858, 8.533490636368395], 
             "TrainingMemory" -> 898824, "TrainingTime" -> 6.472839438], 
           "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 1251], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.528780723646034], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{26, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIKihkYGuwZ6AZG
7Rq1a9SuUbtG7Rq1a9SuUbtG7Rq1C9UuAAroG5s=
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 26, "$InputDimensions" -> {26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{17, 26}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {17}, "$OutputSize" -> 17, 
                    "$InputSize" -> 26, "$InputDimensions" -> {26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIQihkYGuwZqAJG
zRk1Z9ScUXNINwcARBkU0g==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {17}, "$OutputSize" -> 17, 
                    "$InputSize" -> 17, "$InputDimensions" -> {17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSFIQiKUYQKDBnoFu
YNSuUbtG7Rq1a9SuUbvoaxcABakU2w==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {17}, "$OutputSize" -> 17, 
                    "$InputSize" -> 26, "$InputDimensions" -> {26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{12, 17}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 17, "$InputDimensions" -> {17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIHihkYGuwZSAaj
ekb1QPQAACyDEQ0=
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIHiAUZQKDBnoEq
YNScUXOGvzkAYJMREg==
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 17, "$InputDimensions" -> {17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {12}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{6, 12}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {
                    0., 0., 0., 1., 0., 0.}, {0., 0., 0., 0., 1., 0.}, {0., 
                    0., 0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0.}, {0., 1., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0.}, {0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 
                    0.}, {0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.}}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 10} -> 
                   None, {"meanVariance", 1, 12} -> 
                   None, {"meanVariance", 1, 14} -> 
                   None, {"meanVariance", 1, 16} -> 
                   None, {"meanVariance", 1, 18} -> 
                   None, {"meanVariance", 1, 20} -> 
                   None, {"meanVariance", 1, 22} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[900.0332718269286, 606.7108793952467], 
              "StandardDeviation" -> 
              PlusMinus[1157.3667015865963`, 134.98929985461234`], 
              "EvaluationTime" -> 0.00003640968253968254, "TestSize" -> 2800, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11722433333333333`, 
              "TrainingMemory" -> 254560., "ModelMemory" -> 299832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.0003646739756248713,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[766.0584983036272, 150.29009670215044`], 
                PlusMinus[1946.0170779395667`, 419.93428019249274`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1366.9932006606527`, 27.02398708805769], 
                PlusMinus[1098.2079675375098`, 14.35607670059829]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5422.663486869363, 1755.27204541118], 
              "StandardDeviation" -> 
              PlusMinus[1123.1133158512296`, 18.468854755634272`], 
              "EvaluationTime" -> 0.00002628884615384615, "TestSize" -> 2600, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.185987, 
              "TrainingMemory" -> 274000, "ModelMemory" -> 299832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0003833015807961496,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[5422.663486869363, 1241.1647661374268`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1123.1133158512296`, 13.05945243845841]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7771.304630681032, 2962.278029704119], 
              "StandardDeviation" -> 
              PlusMinus[1736.4612174505937`, 17.07270367457669], 
              "EvaluationTime" -> 0.000018841384615384617`, "TestSize" -> 
              6500, "TrainingSize" -> 300, "TrainingTime" -> 0.266659, 
              "TrainingMemory" -> 502184, "ModelMemory" -> 316416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00024823914644770084`, "MeanCrossEntropyHistory" -> {
                PlusMinus[7771.304630681032, 2094.6468825637075`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[1736.4612174505937`, 12.072224541481665`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018841384615384617`, "ModelMemory" -> 
             316416, "StandardDeviation" -> 
             PlusMinus[1736.4612174505937`, 17.07270367457669], 
             "TrainingMemory" -> 502184, "TrainingTime" -> 7.90277827], 
           "Index" -> 10], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "Convolutional"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 1806], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.47271692364785034`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 19}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {19}, 
                    "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 3, 6}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{24, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 24, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {24, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 24, 
                    "$Shape" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{24, 24, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 24, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 24, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {24, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{24}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 24, 
                    "$Shape" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{20, 24, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 24, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{24, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 20, 
                    "$Shape" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{360}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 360}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 360, "$InputDimensions" -> {360}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{360}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
             "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.705191396103285, 0.017471056347349377`], 
              "StandardDeviation" -> 
              PlusMinus[498.764325583972, 15.105848075530584`], 
              "EvaluationTime" -> 0.000057197777777777785`, "TestSize" -> 900,
               "TrainingSize" -> 15, "TrainingTime" -> 0.073736, 
              "TrainingMemory" -> 265152, "ModelMemory" -> 271248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008607458821671952,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.705191396103285, 0.012353902417703018`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[498.764325583972, 10.681447609781435`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.821888617862154, 0.05990940549190762], 
              "StandardDeviation" -> 
              PlusMinus[486.4122507747857, 12.304414756866736`], 
              "EvaluationTime" -> 0.00004634588235294117, "TestSize" -> 1700, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.106239, 
              "TrainingMemory" -> 282224, "ModelMemory" -> 271248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008834803420652001,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.821888617862154, 0.042362346880182464`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[486.4122507747857, 8.700535113112293]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.597105798832344, 0.02165499770049373], 
              "StandardDeviation" -> 
              PlusMinus[479.9721109030947, 11.841888298484085`], 
              "EvaluationTime" -> 0.000058058125, "TestSize" -> 1600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.398314, 
              "TrainingMemory" -> 532432, "ModelMemory" -> 283224, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008954433730253637,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.597105798832344, 0.015312395720598209`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[479.9721109030947, 8.373479517911722]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.568206636662192, 0.011099872491459092`], 
              "StandardDeviation" -> 
              PlusMinus[468.40760149357436`, 5.589425983694966], 
              "EvaluationTime" -> 0.000051639482022317126`, "TestSize" -> 
              7259, "TrainingSize" -> 1500, "TrainingTime" -> 2.077068, 
              "TrainingMemory" -> 952712, "ModelMemory" -> 321368, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0009198750083603585,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.568206636662192, 0.007848795109016742]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[468.40760149357436`, 3.952321016010999]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.601195924917969, 0.025151055921583485`], 
              "StandardDeviation" -> 
              PlusMinus[483.69763037160436`, 11.694599683807771`], 
              "EvaluationTime" -> 0.00007169577625570775, "TestSize" -> 1752, 
              "TrainingSize" -> 7007, "TrainingTime" -> 10.714915, 
              "TrainingMemory" -> 2815720, "ModelMemory" -> 443672, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008886007714074179,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.601195924917969, 0.017784482196153754`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[483.69763037160436`, 8.269330739682529]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007169577625570775, "ModelMemory" -> 
             443672, "StandardDeviation" -> 
             PlusMinus[483.69763037160436`, 11.694599683807771`], 
             "TrainingMemory" -> 2815720, "TrainingTime" -> 
             13.467762043242471`], "Index" -> 11], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "Convolutional"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4362], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.276710490086834], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 19}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {19}, 
                    "$OutputSize" -> {18}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 3, 6}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{104, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 104, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 104, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {104, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 104, 
                    "$Shape" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{30, 104, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 30, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 104, 
                    "$GroupNumber" -> 1, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{104, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 30, "$InputSize" -> {3, 6}, 
                    "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {30, 3, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 30, 
                    "$Shape" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30, 3, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{540}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 540}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 540, "$InputDimensions" -> {540}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{540}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
             "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.472008040367099, 0.07615665237825098], 
              "StandardDeviation" -> 
              PlusMinus[418.8380468053179, 37.846149201430855`], 
              "EvaluationTime" -> 0.0010632600000000001`, "TestSize" -> 100, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.145134, 
              "TrainingMemory" -> 269544, "ModelMemory" -> 247872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.0010047525589514889`, "MeanCrossEntropyHistory" -> {
                PlusMinus[7.472008040367099, 0.05385088532912787]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[418.8380468053179, 26.761268742129598`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.60537999284329, 0.02909973166781306], 
              "StandardDeviation" -> 
              PlusMinus[483.42231635195856`, 13.689190819204942`], 
              "EvaluationTime" -> 0.00009355916666666668, "TestSize" -> 1200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.68402, 
              "TrainingMemory" -> 521328, "ModelMemory" -> 259848, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008884128520478575,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.60537999284329, 0.020576617593019535`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[483.42231635195856`, 9.679719657216443]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.599059913545017, 0.011932541206880675`], 
              "StandardDeviation" -> 
              PlusMinus[486.6705939986243, 5.818320897895147], 
              "EvaluationTime" -> 0.00008141176470588234, "TestSize" -> 7259, 
              "TrainingSize" -> 1500, "TrainingTime" -> 4.430113, 
              "TrainingMemory" -> 979088, "ModelMemory" -> 297992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0008853562282837597,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.599059913545017, 0.008437580804173235]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[486.6705939986243, 4.11417416202106]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008141176470588234, "ModelMemory" -> 
             297992, "StandardDeviation" -> 
             PlusMinus[486.6705939986243, 5.818320897895147], 
             "TrainingMemory" -> 979088, "TrainingTime" -> 
             26.014040511333334`], "Index" -> 12], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 1251], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.47978616393021245`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "meanVariance" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "mean" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "logvariance" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{36, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {36}, "$OutputSize" -> 36, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJztzkEKQGAQQOHJQq6hnIADyBU4wa9YKcVCdo6OcoC3tHhfzdQ0m1eOaz9n
EbEXz+rT0W1bOof8Paa0NPXyPqtvIq42fscmxibGJsYmxibGJsYmxibGJsYm
xibGJsYmxibGJsYmxibmam+u0CMl
                    "], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {36}, "$OutputSize" -> 36, 
                    "$InputSize" -> 36, "$InputDimensions" -> {36}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {36}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{14, 36}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 36, "$InputDimensions" -> {36}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIPihkYGuwZyAaj
ekf1Di+9ALlxEo8=
                    "], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 14, "$InputDimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIPiFUYQKDBnmHQ
gVE3EQdG3UQcGHUTcWDUTcSBUTcRB0bdRBygnZsAZG4SpQ==
                    "], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {14}, "$OutputSize" -> 14, 
                    "$InputSize" -> 36, "$InputDimensions" -> {36}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 14}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 14, "$InputDimensions" -> {14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[2, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "mean"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "logvariance"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "loss" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "mean"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "meanVariance", "Outputs", "logvariance"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"meanVariance", 1, 6} -> 
                   None, {"meanVariance", 1, 8} -> 
                   None, {"meanVariance", 1, 10} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Input1" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "Inverse" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], 2.}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Divide, 1., 
                    NeuralNetworks`Private`ScalarSymbol[4]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "minus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 2.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "threading" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "l2Regularization" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 1.1, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "concatenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "summation" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inverse", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "minus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "minus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "threading", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "l2Regularization", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "concatenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "summation", "Outputs", "Output"]}], 
                 Association["Version" -> "11.3.4"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.094176831418002, 0.015085403133948122`], 
              "StandardDeviation" -> 
              PlusMinus[654.0789716936033, 8.116880525797878], 
              "EvaluationTime" -> 0.000019930363636363633`, "TestSize" -> 
              5500, "TrainingSize" -> 300, "TrainingTime" -> 0.244687, 
              "TrainingMemory" -> 489656, "ModelMemory" -> 238096, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0006587030687154758,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.094176831418002, 0.010666990852947512`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[654.0789716936033, 5.739501261872709]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000019930363636363633`, "ModelMemory" -> 
             238096, "StandardDeviation" -> 
             PlusMinus[654.0789716936033, 8.116880525797878], 
             "TrainingMemory" -> 489656, "TrainingTime" -> 7.388731776666667],
            "Index" -> 13]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 15]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
              "ModelMemory", "ExperimentCount", "ModelUtility", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 13], 
        Association["ID" -> 193638742132352]], "MaxTrainingSize" -> 8759, 
      "LastReportingTime" -> 3.739115365048972`16.32534385405508*^9, 
      "PreprocessorEvaluationTime" -> 5.53271484375`2.*^-6, 
      "PreprocessorMemory" -> 70312, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 5.036421734336375, 
          "ElapsedTimes" -> 9.319432, "ExperimentCounts" -> 21], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 6.295527167920464, 
          "ElapsedTimes" -> 9.340066, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 7.8694089599005865`, 
          "ElapsedTimes" -> 12.166818, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 1500, "TimeBudgets" -> 9.83676119987573, 
          "ElapsedTimes" -> 13.000344, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 7007, "TimeBudgets" -> 12.29595149984466, 
          "ElapsedTimes" -> 14.649621, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[193647332066944]], "ID" -> 
         193651627034240]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Date", "Weight" -> 1, "Values" -> {
             
             DateObject[{2017, 4, 28, 19, 59, 45.860000133514404`}, "Instant",
               "Gregorian", -4.]}, "ID" -> 5216113400745425930]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 124.458853, "MaxTrainingMemory" -> 8535640, 
      "DataMemory" -> 3713896, "FunctionMemory" -> 2895984, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 6, 27, 19, 9, 51.700178`8.466067013590779}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.739129118268252*^9, 3.739129275038019*^9, 
  3.739129365759808*^9, 3.739129791799583*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"7c4ffc61-d9ad-406c-8abb-5b5c4ed77eca"]
}, Open  ]],

Cell["\<\
We test the network and see how it predicts for the next 24 hours\
\>", "Text",
 CellChangeTimes->{{3.7391186316110373`*^9, 3.7391186449112883`*^9}, {
  3.73912112867986*^9, 
  3.739121131357497*^9}},ExpressionUUID->"d20b8c70-aa2e-4909-944f-\
a7887294eb74"],

Cell[BoxData[
 RowBox[{
  RowBox[{"test", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", 
       RowBox[{
       "2017", ",", " ", "12", ",", " ", "1", ",", " ", "i", ",", " ", "0", 
        ",", " ", "0."}], "}"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "0", ",", " ", 
       RowBox[{"24", "*", "31"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7391185543031063`*^9, 3.7391185617683163`*^9}, {
   3.739118715078703*^9, 3.7391187161829557`*^9}, {3.739119305917101*^9, 
   3.739119307305662*^9}, {3.739119391432864*^9, 3.739119405377798*^9}, {
   3.7391203033150673`*^9, 3.739120357648525*^9}, 3.7391211955711603`*^9, {
   3.73912812639207*^9, 3.739128134145451*^9}, {3.739129804845428*^9, 
   3.739129807927401*^9}, {3.7391299181742067`*^9, 3.739129927012693*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"a2e0d880-f73c-4a9c-a853-ff75cdcdfe1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"forecast", " ", "=", " ", 
   RowBox[{"p", "[", "test", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739120380428342*^9, 3.739120383379384*^9}, {
   3.7391219636789*^9, 3.73912197957366*^9}, 3.739122258617611*^9, 
   3.739129995902259*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"709e881d-bfdc-4acf-b9ae-aaaea65df6f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"actual", " ", "=", " ", 
   RowBox[{"validationset", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739121499641465*^9, 3.739121516221678*^9}, {
  3.73912165466903*^9, 3.7391216723234386`*^9}, {3.739121927822774*^9, 
  3.739121929667997*^9}, {3.739121973968601*^9, 3.739121982780397*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"59cd4975-a3fe-42ad-92a2-ab2121fb6463"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"{", 
   RowBox[{"forecast", ",", "actual"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.739122174585526*^9, 3.73912228589456*^9}, {
  3.739129413253172*^9, 3.739129413623801*^9}, {3.7391303276176367`*^9, 
  3.739130347190362*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"261aa36c-1a22-44cb-b4d9-c55064893463"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.006944444444444445], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw9Wndczvv7TkjHKoSKqE6SnZXsq4SQVKJEeprSfNq7nl12ZIQjj01WVrLL
OEJIlOys5FiVFYlf39fvuR5/HK/rvLu7P/d4X/fnuj9MfMJd/DU1NDTeNv/n
f3///5/aido6le+vHl4H1f9At/zTB7/kEmvDp8snA+3dxLoIqp9YrrmNWA+n
7U1DX28m1sfTpuTYvPXEPYFjwv1+q4mNMfnXqpuay4lNYWW+59IyBbEZXIRf
kjTExOZ4apD/yjuJ2AJv6071PRJD3B+X18lMXnYmHgjby5oOnToQD0bsyoG3
LNsQW2Ka94fWk1oQD8XNdl2MpjWuVeFhKLvotMruK/Fw/H3wxjOrT8QjcHz2
Mk+Tt8QjMWiJoKD1S2IrxJ62cnz9mHgUHOq7HSmqILZG8KDkxH9KiUfjykTB
o/uPiMfgekbitlr1z4/F8RNZkto7xOOgsSbWtLKEeDzGdcnuuPcq8QTcLlmq
7X2ReCIswpoutjxHDGTanTVbfVKFRYDjliy9tkd5boO8u08iwg/w3AYX9z4M
vbib57Y4PfFA61bbeG6Lhd4W85In8HwSBqX3f5hjzfNJ+JSQsffYMJ7bIW1p
p6FnB/LcDk893x47Zc7zyTj/4tedg8Y8nwzDvOdlGw15PgX5TwfbpOnxfAoc
gr3yvTryfCrOHy/dME6b5814X7iiuybP7dF+zmS9+sYs1bk91ur9nuAwh/0w
DXOiLrk6O6mwaBoyTy1tN2EGz6fj5q0xDZ2n8Hw6tuVXKEvB8xmwivfrFD+W
5zPQrfH607+seO6AWJ+BWumWPHfAlkbXsNr+PJ+JvAtn+0/tw/OZ+HfZBc/l
vXnuiL8W+XYpMuC5I/rkV+YsZj01ZmHr9PIp4iOMfxbsnzwZunw/z53wOL6x
btkuFYYTpiw1eC3eyp93QoBwnTB8owoXOuEvl7Xd52bR3hk/5oz1HLWC9s74
GN/6kV467Z1R8GlX+1oR7Z3R+eSGZdcTae+CGy1X3t0VTXsX2M78Xh7cl/G4
IKRp+w5PUxUudMGZ0mWJo4wY/2xsjxV0+NldhTEbyzNtuu3m/RfNxo307qHj
eP8LZ6Os3erL59T33xUHn3yYOUCT9q44FNDtufwXn98VH6UBylvf+PyuSPhm
dE6rjs8/B4s2Z88b8o7PPwfVhv2E7zJoPwcZb/970SCh/Ry4z39c+TOZ9nMx
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
9PX4P8aRev4=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.006944444444444445], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw9WnlcldXWBhzCmxlqJZXpMU1RM3HGq8arojiHiApOHBUQFOQwcxjfM4Iz
ZaXmwHH4jHIIvQ5YX3qyUhxKslIqh2PXAacksyulwPfdZ6/H/ojf437fvfd6
1lrPWnu/p9O85PBYHy8vr5r//99//6r/aoPX/u5lzJy4VpN/0P6LC3a9L9hX
+yK3vnH76fcE+2nFYV6G+zuJn9MaZjTxiljP5/210G7ehrvrPxDcXjMu8tL3
l60XbNDKB3i5M5tuEPyqVjun8cjTKcRd8DfymY2Cu2qDe9ZfXt5vk+AALbml
t3uJN3EP7aaxvnR+Nz7/OtYfFczxN/C32M8lOFC78nlDYdEo4j6Yb+PKzYL7
alr3xsagT4j7ae5zXl7tEoj7a653GwuPVvL9Adj/W82JB2rtSn2MG9py/UHa
2380BH/7iPYHadUveRmHJHG/g7WuWhOXVxOO/1M7VN1weWmvdYKHaPcO+bgH
PUP/DNUWJPi4XjlJPEyb9FoT7es3+Pyb2rr366PPHuN4sPbzkcfR0a04v6al
7Kk/squ/rK8rfO1gqYwPh/97LBF79OHYzzs/0b4R8F/cI46P0CrNjR2P7Ob4
SPCbPITjIzF+fALHQ7Qgp5dn21ccDwG/q7tukfFRWP/YIsH6KO3hLG9P8CyO
j9ZabG3o2PSo+EMfrQVcayzt/x79E6rFt2osXdee46Hg/9Ia2jdG89vspU0Y
J/Gmj1HxbSF/Y+HP758SrI9FPH2zh/E9DvYfuLlGxhV2pgv2Gg8+V3zD8fHw
95TjnH+C9tGghtKua7n+BK33v73d/YcxXyZivwe+5voTtb+8Gy4fH0n/TQIf
tzsL1idpB/v5eLZv5fhb2vEffAxDbnP+txDfv59ivIVp/iGN0QGJEp9amBZ2
sjH4xFj6Q42H9RT+3Gr8tdv032Rtrl994e8Vwqc2Gfk/dIBgfbJW85mXa0gK
35+M+PEZwXwIx/4W9ZX9aeHwV4s1Eq96OPzTpavw5w7X9v78+EibYurNFK1w
l7fXsRcEa1Pg/wnnBOtTYG9rX8HuKeB78U/kNwL58OxD4UuLgL6030Y+I7Q+
xQ1HskMEuyPA9y+D+f5U7bK/j/7LZfGPNhX7O3qU/pqKfG3MEOyeiv2dvkb/
T8P8/glcf5o29nR9x+4nmI/TtKcavA3VWcKXexr4n1tJ/03H81GHyN90FR9t
uP/pWD/5iPDpno74/raG8RGpWcIbGlucF361SIz/Z6fEtx6ptR5dH2w6Q/4i
1X5CyX+U9uE73q5fu5H/KNh//yz5j8L6C7y5fhTyu+cXtH+GFpXUED07WvjU
ZmjZnzRe3nhWsD4D/G71CHar8fyl3P9MrNejhPzNhN4+d4j2z4TeTC8Rftwz
MV/nJeRvFvxxtQf5m6V1HOGtV48RvvVZ+BsWKvHsnoX1cl5j/M6G/kRs4fuz
ke9//s79z9a+a98Q/FkK7Z8NfZ66gfufg/ox7zPyPwd6eSR1tbw/B/H28nPv
yPtzlD/SBXtFw18H2r0t70ej/n0/m+9Hw79zt/P9aOjT9bPvyvtG+KPzOvG3
wYh693gP92NE/pd1kf0bjcinlAzmp1HVs/2CXUboec0rjHcj6n3+MpnPY0R+
hfSg/+cqfUmS9w1zMd9v/cjnXOznakfh2zgX70esZ37Mhb1pN4RP11z4I+9z
xos8v0Hm98yF/dPi2F/Mgz/qB8l+DPPgr1O7hB9tHvR04C8Sz8Z5eP+NHoxv
9f4z1BfXPPhr5nXmyzzk64vfy3yeeVrmP5p4rlSS//l4/lSI8GOYj3q+sY3s
V5sP/25qK+PG+dAL9yiuPx/xGH5K5nPNR76tCRHsnq+tmuSjfTqe68+H3hWe
4/oxiP/H9TKfIUZb+ufjjtfXc/0YxM/g1sKPMQb5uqIf4zsG8T6Mz7tiUA+u
/JPxHgN7er0j83ti4B/7z+xHYtGfnNxI/mOhL2GHGX+x4G/yDIlPYyz8eeeJ
vseCDz83+Y9F/vS+IM+7Y2H/ffrLE4t+oqGG9sfBvw3NGH9xqF/bqml/HOpF
8xLaH4d469mO+h6H+X9Olv264lC/n/uS9SoO+XU7hfEfB//3uc/+YAHsDToo
8W1YgPo4cJPUV20B9GHcaKmfxgWwr7CA9XmByr8o0SfXAvTje7dJfrjV88nJ
kh+eBehnVj/D+hWv/L2B/MfDPw+ep/3x8PfdnrQ/Hnx9O5j5H498eUR9d8XD
ntrj9H+8VnrPR1+5hvzHo57P+pv2Jyj9+U32Y0hAPOzdKPvXEvB+QYzkqzEB
f/XH7GcStDNZ3tqNW8KfKwHx0ukX1ssE8NNqnWBPAvToWgj7v4Uqf48JNixU
+d1b+NYWYv4zx8j/QujR8oXsJxeC748PiT9c6v3dxwW7F8J/DeMEe9R4h+6s
H4vAb2yg+MewSJte6W38ayj5X4T+aEovxv8i1e/0lfjVF6G/6m0XvXctQn40
bS/YvQjxvtKX+b8I+48Zz/41Ef7u0pT8J2qdbtQXNr3OepyIeBmZJ/szJuL9
fbdZXxOxnzl/UX8ToVdzzrNfSsTfIG/xlycRfI34hvUvCfjWNRk3JIHv44MY
/wp/v478J6E/vBtO/hWeepL8q/n6BpP/JNSrTucknjxJ0KuJf1D/FyNey0Yx
/xeD/+6Jwo+2GPFzvR35X4z+//ML1J/F6CdOLaP+LIb9b2yl/i5GvnfqT/4X
g89lT85jyciHvBa0PxnxvonnMS0Z+TW/SLAxGXo8fCnjPxn+X7Wf/Ccjf34O
Yb+TjP0M/Jr5nwy9+sDO/seE+dvOFn/7mWC/2cb9mNR5ZJvEa6AJelvM86xm
Qv/Z5xt5PsyEeGs+gfFiAv/er4q9JoV/CmL8mlD/y1eXKFxiQnw9qQ8uE/T3
2Dp5vlytF+VifJsQf+9/I7jKBH8VjBZ/edR+Bj4luNaE+B56g/qTgvwa+Y6s
56dw20PUwxT4q/Mq4ScwRfUPPzI/UhBvZ48JDkvRgu0+XuYTgo0p4P+cWbAp
Bf3r/zSwfqTAniU2GS9Jwf6PkU+Xer/DcOG7PAX53b8/9S0F9i/2E1yVAvuu
9qK/1fvb2V/WpkD/VlAvvFIVHy7pD/1S1XkobaXYnwr+J1WtEPtTEZ9z/i4S
+1MRvw+aLxX7U7XYr5q5NndbLvanIj+HnxP/mlLh31kf8XyRin69P/ktUfNP
as54ToW9P1AvylPhn1Mm6ksq9DX8ruCqVOTn/ndpfyrOQ9GPZf5atZ+/ejP/
0xDvfVYK9kvDeWHNfdEPQ5o6n0WJ3gSmIX5f3MD6kAb9LJ8kz4elQc+v6exX
01DPrQmCTWmoN68cpH6q5ycuEVySBvvGN9B+9f7JObQ/DfF3bC/7WzV+P11w
VZrKpx8kvjxp0Cfb+7Q/DfX7UjTtT8d+3tsp9c8vHeefiif1KB3x8jXXD0yH
nnmb2Z+n4zySfU7Gw9Jhz67hjP905MMhnndN6dCrQTHsH9PRn5xnv1+Sjv3+
sYn9TLryxxnht1zhkTHU93T8rayR56vSoX9H97Dep8Pfc/1l/lo1fstM/c1Q
9fGh6KFfhjpv9WE9zIBe3vpCng/MQP+3bDLrcwb2U3pOcFgG8u36UOpfBvIj
8aRgUwb0JDed55cM1KOMwYJLMhBv1SsEuzJUvz6Y+a/298t99ncZ8N+fFYKr
1P7aLmS9y4De1IcKrs1A/HR9SP9nwp8319L+TMSzb0fGfybyaSz7m0CFd43n
fU8m9OESz2NhmbBn6j/Yr2VCHz9tRv3LRD0Pvcr8zwQfPesY/5nw/5f75XlX
JurPg1MSP+WZ8MfeDjxfqvVfWCr6VpWJ/m/sPep/Jvw9ro76lwk+733K/iNL
1QveF/tlob52msF+MAt8nSsVHJgFvvOv0f4s+CvwJeZ/lor/WBk3ZuF89eCe
zG/Kgv8e1fB+IQv8rBwm75dkqXoTJ/riyoL/9vfZIvZngb9HdwS71XpJ8YKr
1HoXquV9Txb66y95fqjNQrwfeJX3d9mwv3mV7McvG/Z3b8H6l43z5a/Lmf8K
h49j/GfDP3nJjP9s6OPwQp4XstX5KoL5n41603IX+5ds6EMLH1m/JBv9mB7B
fj4b/PQYLHyWq/G6RtY/tZ95vG+sykb8nq5k/it7fuLztWq+j7fRfjP0qN/f
gv3MuJ/NChM+DWboa98bggPN0Me1nbeK/Wbkf/B5GQ8zI/4+v8N+1Qx/d7ML
Npnhr/3zeD9qhr+HMD5KzNjfSxGMfzPq49C+Er/lav6bTXi+NcPfeW8KrjLj
+4GH98seM/Lpezv134x+oVUp+58cdX88VrBfjtL7HfR/jrq/HiX7C8zB/Y7h
Kfan6vnn86n/OfCPqxP9n4N8ufuA/V8O6kUd9VDPwf5eZr0vyYFeb/6b/U8O
6kO0mfqXA33dXUb9y8F9w2TqWVUO6l/lPtb/HORnGc/rtTng71Ab3l/mYj1z
U+Z/LvJlmYfngVz4uy5Png8UfJn3Q7nIz+eXCQ7LBR8D3Dwv5CK+orcINuWi
33uR5zk9F/cjs5+W/ZXkwj8DLwp25cL+h9upf7mIzx1/Uv/UeFaw4Kpc5J+5
F+8bcnG+f/NT6l8u+G6ykOe/PKw3Oor+z8P8uTtY//IQX1+dF34D81T/8gLr
fx7mH3iG/W8e/BH1If2fB73q6KT9ebgv3pvH+8k89IMTFrH/y4OeHx7P+5Q8
6O+li8J/eZ7qF1sw/tX6B0IZ/3mw/8oj6n8e9Mc5gv1/Hvq9Flbanw/92vkK
zz/5uP/JY39iyFf+Pi32BObD3xNT2f/nI16e7k/785FPW9fR/nz0sw27qX/q
+c7s1/R86Efovxn/+fjrG87+Jx/8zdTZ/+TDP6tfZ/+TD//caUf9U+8HplH/
1PuhLdn/KPt+OMv+pwD9cSnPg34F8EdIJe0vgF53GU/7C5BPATup/wX4W/UB
9b8A/bjPatpfAP1MPS3+NBXAH79d5f1RAez/xMP+rwD6VbGH/U8B6nW3fTJe
XoD4S4pj/6/wMPb7VQXq+09r5n8Bzg8xowXXFsD+Dd3Y/xTCnqp7sl+/QuRT
ML8vGwpRn/ZM5fm3EPUkyovn30LEk7eL599Cle9vsP8pxHqPt1D/CsHPyRqe
/wrB784EiceSQuRPizW8zymEnuzykfNZeSHqRdtoue93FyLeOvcUXKXm29Bb
sKcQ/VKPjwTXFqLen7vK+08d+/k1Sfzjq2P/HXN5HtZh33efSjz466p/trM+
6DivrPYWHKBDz5odZrzo6nvuJcFBOupDSQvGj1r/fjfBY3T1/Zvfg8J0+OPM
HcGROvzle5HfI3T0u1Oayf7jdfTbyzXGm4769blJ+M3W8ddvk/Cpq/3Pj5Hz
brGOemBZwfsIHf3FXt5Pr9VRPwbf5H2Pjnrj2iv+KtMRLyea875Cjcd/J89X
6Kp/LOD9sI54Sngo81eq/b+7lP28jvv80M2S39WKr65JvE/UEQ9rHgiuUfyU
tWG/p/b7Y7mM1yk+uzWy/7HAP8/ek+d9LfirfbZFYT+L6qcfCva3QA+3rRds
sECfR/B+NMCCeCy18Lys8L8csv8gC+p387f5vc6CeF/yGv1vgX1bDlBPLIiX
KoPwFWmBf6LqWV/V+yda0f8W6Nfrx1lvLOp8/y8Zz7agvqxkf6pbUD868H6m
WNkfv4l6pN5fskP8sdai+qkF1GcLzkMrWgqfZWr/r95hv2pBv93VKLhCPb9x
Ob8nWtR9QRN5v9IC/1XeFFyl9vPgW+Gz2gL9b9KC/b0F/j//Fv1vUeflIzJ/
rQX6e+uK6FWdBXq6KoH3f1bU49SfhA9fK+Kx9dfMf6v6fnJS+PO3op4cZPwa
rMi/l6MFB1jVfSe/3wRaUa9/sMh8QVb4P7OE9dMKvY7g/ecYK/Rp4G/UU/V+
YkuxJ9IKfps/z/7aivzax9+jxFvB91GHYJMV/ru5T97PtoJfY29+P7Ei376q
EFxsVb/PsMr8JVbkS9oNwWutiPe+63k+s4Lvbq9uUbjMCn+sd8t4uXp++9uC
KxR/6w+yfluRT4E28Uelsq/NRfazVtSPLvnCV7UV+h7zlGCP4vP6BPFfjZqv
bDP7fSv0qFMvsb9O8XO9C/Pfhvcv8f7e16bOX/w9ip8N9XrTENmfvw39wnn+
XslgQ32qPyo4wAa9uvcBzws2nBc03mcH2dBvdn2W5wcb6k0j7w/G2KA3lnie
p9X4kf8V/iJtyP+kt+h/G/i+vYP+tyH+fj8t9pps0LfxV2X+bIVXd+D5w4bz
YkxHwcU21d9dEr0usaHevfSh6MlaG/5WBAh22cBvQqrgMhvibTjzo9wGfTns
J/6oUHy/wPOKW+1/fEv6X60/6gL13wb/34kVXG1DvtQ6mf82xJf1iOAaxfeE
GdR/xfe4pwXX2aA3k7P5+yg79Pm4h/pvhz//miTnWz873reatinsr563vSjY
YEe//V6pPB+gcMpvWxQOtCPfQq7I/EF2rH+xPb/v2JE/lw8IHmNH/s0cIc+H
qfeLi2Q80g69KogQbLQjn4p4HxhvV+fn7sx/O+pBCfMt267q5ZPfq6n9DPNn
/tvV77l4f1JiV79H+FHsWWuH3tTdFexS77f+W3CZHfl765Lgcjvy7f0Lgivs
0Jvyr/h7KDv8Gcn75Uq13tJyeb7KjnhYUiL8Vit+Ny4W7FH2dD4sz9cofzn/
oP8VP1OW0v926MPOafS/A/ub0U7s93VA7z9uxfx3oF4Nq2P/51DfU3l/bnCo
/K2V8QAH/NdzN7+XOHD+cc5g/+dQ30evs/9zID8yv5XxMQ74WzvJ/s+B81lI
kqwX6UD9WrCG/bXa74hpguMdiI+XMnnf6lDn210yX7ZD5fN13r/K/KOkPhYr
Pnb78j7OofKzOfVf2d98F783OsDvGtbvMgfqYWeHzF+usG2V7K/CAf1p257n
d7XenLeZ/w7o0QV+X6pyIP+bvifPVzuQfzvu8Pcsav5l/H5Vo/yR7BZcq/Y7
mr8frHOgfrzO85KXU90XDZf1fZ3wV+Ysfg9wqt8PvCbY34l4z3dT/53gu0ey
8BfghD//c4P671TfJ2+I/UFO5a9evD9w4j7kpsb67wTf/VgPw5zov/uelvkj
nagPS/z5fUXtd/dFeT7eie+ZW6mnJjV+mL/vy3ZCH8fw9wq6U52fx4heFzuh
531G8j7SiX59I+1d6wTfTQL4fUbx55cl+y9zon568b6s3KnOF6yHFU71vWYg
9d+J+zD3y8JvpeJ3QDj7Pyfy76NUwdVO+L/nk/7PiXzRNeq/4i+Uv3+tVfbu
O8/8V/YGbGb+F0HPLkzZorBvEfL3yyTqfxH4vvsM9b8I++k+mPpfBH0akE79
L4Kerzoh8wUWIT463Kb+F6n7gGb8flaEeN/24Xrt/wBWEnob
      "]]}}, {}, {}, {}, {}},
  
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 745.}, {0, 2616.2539063}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.739122182897232*^9, {3.739122213851852*^9, 3.739122286590355*^9}, 
   3.739122450198492*^9, 3.73912253168195*^9, {3.739129389985063*^9, 
   3.739129414312076*^9}, 3.739129822718774*^9, 3.739129961958414*^9, {
   3.739130330288987*^9, 3.739130347657501*^9}},
 CellLabel->"Out[50]=",ExpressionUUID->"303004bc-fdde-4505-a00d-fbd04b34c903"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "=", 
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"test", ",", "\"\<Distribution\>\""}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739130065005208*^9, 3.7391300708124723`*^9}, {
  3.739130124732482*^9, 3.7391301349051657`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"c1ba1223-4a21-4db7-9dd2-b14bcaa13124"],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{"1387.9452394255804`", ",", "538.5085798223541`"}], "]"}]], "Output",\

 CellChangeTimes->{
  3.739130073512107*^9, {3.739130128742291*^9, 3.739130137007922*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"6321ddc2-21f2-4973-b863-294d33475c42"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{"dist", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "4000"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739130146451847*^9, 3.7391301793154078`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"86f2dad3-e039-4d33-8eae-95d35c6e3702"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
uyy3
       "]]},
     Annotation[#, "Charting`Private`Tag$61354#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.739130148206918*^9, 3.739130180311068*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"4a93f69e-23c7-4473-b64d-5bdac031a176"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 170, 3, 67, "Section",ExpressionUUID->"0c23635a-111d-4338-b3da-de77221e362a"],
Cell[CellGroupData[{
Cell[775, 29, 257, 4, 45, "Subsubsection",ExpressionUUID->"fd8b3198-1947-4c21-ae06-a71bfe4ac46b"],
Cell[1035, 35, 192, 3, 35, "Text",ExpressionUUID->"5ae7a89c-f9ce-45e2-9674-ed82cc6e67d3"],
Cell[1230, 40, 439, 9, 52, "Code",ExpressionUUID->"39875c20-e080-454c-b290-b05c3e3d6e63"],
Cell[1672, 51, 363, 9, 30, "Input",ExpressionUUID->"554cc804-11e8-4d3d-acb9-af0c3492b4d6"],
Cell[2038, 62, 201, 3, 35, "Text",ExpressionUUID->"e7b27d25-4373-4ad6-b888-d1e8a5f18ec9"],
Cell[2242, 67, 537, 10, 52, "Code",ExpressionUUID->"471244cc-7954-4079-b5c6-687496a069bc"],
Cell[CellGroupData[{
Cell[2804, 81, 258, 5, 52, "Code",ExpressionUUID->"7c68703c-805f-4206-b49d-baff2e4afc1e"],
Cell[3065, 88, 318, 6, 34, "Output",ExpressionUUID->"c180e379-140d-4bc8-8a23-2fbd5a523ab5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3420, 99, 487, 11, 52, "Code",ExpressionUUID->"e7aa36e0-41c5-4998-8ae1-8978d7c98746"],
Cell[3910, 112, 15765, 377, 201, "Output",ExpressionUUID->"9c328a56-88b3-4246-8c7f-0fcfdecf7881"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19712, 494, 423, 11, 52, "Code",ExpressionUUID->"7d2ca0f7-a103-436c-92b3-84848b619348"],
Cell[20138, 507, 17452, 417, 166, "Output",ExpressionUUID->"88dbee02-e434-4827-b16a-c15e7e75e304"]
}, Open  ]],
Cell[37605, 927, 487, 9, 35, "Text",ExpressionUUID->"11b017c1-3b06-4f28-98d4-75bfe865b888"],
Cell[CellGroupData[{
Cell[38117, 940, 806, 13, 30, "Input",ExpressionUUID->"6efb55a0-1ae5-461b-b922-16620606fe23"],
Cell[38926, 955, 17530, 419, 166, "Output",ExpressionUUID->"d6ffe3d8-3881-4960-a755-b5bc195e1046"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56493, 1379, 476, 11, 30, "Input",ExpressionUUID->"646c8cc9-195d-41d5-b24f-1b6cf72c2105"],
Cell[56972, 1392, 17565, 418, 166, "Output",ExpressionUUID->"f261abdb-dac8-4ad4-a450-98d7b32cd574"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74586, 1816, 224, 4, 45, "Subsubsection",ExpressionUUID->"5129ed10-a50e-40d7-9050-8ec91b0c883f"],
Cell[CellGroupData[{
Cell[74835, 1824, 553, 10, 30, "Input",ExpressionUUID->"c3ac7f32-f2dd-40ae-b912-e22964ef30eb"],
Cell[75391, 1836, 743915, 13384, 64, "Output",ExpressionUUID->"7c4ffc61-d9ad-406c-8abb-5b5c4ed77eca"]
}, Open  ]],
Cell[819321, 15223, 267, 6, 35, "Text",ExpressionUUID->"d20b8c70-aa2e-4909-944f-a7887294eb74"],
Cell[819591, 15231, 948, 19, 30, "Input",ExpressionUUID->"a2e0d880-f73c-4a9c-a853-ff75cdcdfe1d"],
Cell[820542, 15252, 356, 7, 30, "Input",ExpressionUUID->"709e881d-bfdc-4acf-b9ae-aaaea65df6f3"],
Cell[820901, 15261, 471, 9, 30, "Input",ExpressionUUID->"59cd4975-a3fe-42ad-92a2-ab2121fb6463"],
Cell[CellGroupData[{
Cell[821397, 15274, 368, 7, 30, "Input",ExpressionUUID->"261aa36c-1a22-44cb-b4d9-c55064893463"],
Cell[821768, 15283, 18853, 326, 241, "Output",ExpressionUUID->"303004bc-fdde-4505-a00d-fbd04b34c903"]
}, Open  ]],
Cell[CellGroupData[{
Cell[840658, 15614, 378, 8, 30, "Input",ExpressionUUID->"c1ba1223-4a21-4db7-9dd2-b14bcaa13124"],
Cell[841039, 15624, 302, 6, 34, "Output",ExpressionUUID->"6321ddc2-21f2-4973-b863-294d33475c42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[841378, 15635, 398, 9, 30, "Input",ExpressionUUID->"86f2dad3-e039-4d33-8eae-95d35c6e3702"],
Cell[841779, 15646, 12434, 222, 227, "Output",ExpressionUUID->"4a93f69e-23c7-4473-b64d-5bdac031a176"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

